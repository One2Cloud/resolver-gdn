/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface DomainRecordFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "BRIDGE_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR_ROLE"
      | "REGISTRAR_ROLE"
      | "ROOT_ROLE"
      | "WRAPPER_ROLE"
      | "bridge"
      | "getExpiry"
      | "getOwner"
      | "getResolver"
      | "getRoleAdmin"
      | "getTokenId"
      | "getUser"
      | "getUserExpiry"
      | "grantRole"
      | "hasRole"
      | "isExists"
      | "isLive"
      | "isOperator"
      | "renounceRole"
      | "revokeRole"
      | "setExpiry"
      | "setOperator"
      | "setOwner"
      | "setRecord"
      | "setResolver"
      | "setUser"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DomainBridged"
      | "NewDomain"
      | "RemoveDomain"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetDomainExpiry"
      | "SetDomainOperator"
      | "SetDomainOwner"
      | "SetDomainResolver"
      | "SetDomainUser"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BRIDGE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTRAR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROOT_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WRAPPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridge",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpiry",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwner",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getResolver",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenId",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserExpiry",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExists",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLive",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpiry",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [BytesLike, BytesLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecord",
    values: [BytesLike, BytesLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setResolver",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUser",
    values: [BytesLike, BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BRIDGE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRAR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROOT_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WRAPPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getExpiry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isLive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setExpiry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRecord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace DomainBridgedEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    dstChain: BigNumberish
  ];
  export type OutputTuple = [name: string, tld: string, dstChain: bigint];
  export interface OutputObject {
    name: string;
    tld: string;
    dstChain: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewDomainEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    owner: AddressLike,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    name: string,
    tld: string,
    owner: string,
    expiry: bigint
  ];
  export interface OutputObject {
    name: string;
    tld: string;
    owner: string;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveDomainEvent {
  export type InputTuple = [name: BytesLike, tld: BytesLike];
  export type OutputTuple = [name: string, tld: string];
  export interface OutputObject {
    name: string;
    tld: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDomainExpiryEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    expiry: BigNumberish
  ];
  export type OutputTuple = [name: string, tld: string, expiry: bigint];
  export interface OutputObject {
    name: string;
    tld: string;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDomainOperatorEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    name: string,
    tld: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    name: string;
    tld: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDomainOwnerEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    owner: AddressLike
  ];
  export type OutputTuple = [name: string, tld: string, owner: string];
  export interface OutputObject {
    name: string;
    tld: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDomainResolverEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    newResolver: AddressLike
  ];
  export type OutputTuple = [name: string, tld: string, newResolver: string];
  export interface OutputObject {
    name: string;
    tld: string;
    newResolver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDomainUserEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    newUser: AddressLike,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    name: string,
    tld: string,
    newUser: string,
    expiry: bigint
  ];
  export interface OutputObject {
    name: string;
    tld: string;
    newUser: string;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DomainRecordFacet extends BaseContract {
  connect(runner?: ContractRunner | null): DomainRecordFacet;
  waitForDeployment(): Promise<this>;

  interface: DomainRecordFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  BRIDGE_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  REGISTRAR_ROLE: TypedContractMethod<[], [string], "view">;

  ROOT_ROLE: TypedContractMethod<[], [string], "view">;

  WRAPPER_ROLE: TypedContractMethod<[], [string], "view">;

  bridge: TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [void],
    "nonpayable"
  >;

  getExpiry: TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [bigint],
    "view"
  >;

  getOwner: TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [string],
    "view"
  >;

  getResolver: TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [string],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTokenId: TypedContractMethod<
    [name_: BytesLike, tld: BytesLike],
    [bigint],
    "view"
  >;

  getUser: TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [string],
    "view"
  >;

  getUserExpiry: TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [bigint],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isExists: TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [boolean],
    "view"
  >;

  isLive: TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [boolean],
    "view"
  >;

  isOperator: TypedContractMethod<
    [name: BytesLike, tld: BytesLike, _operator: AddressLike],
    [boolean],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setExpiry: TypedContractMethod<
    [name: BytesLike, tld: BytesLike, expiry: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOperator: TypedContractMethod<
    [
      name: BytesLike,
      tld: BytesLike,
      operator_: AddressLike,
      approved: boolean
    ],
    [void],
    "nonpayable"
  >;

  setOwner: TypedContractMethod<
    [name: BytesLike, tld: BytesLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  setRecord: TypedContractMethod<
    [
      name: BytesLike,
      tld: BytesLike,
      owner: AddressLike,
      resolver: AddressLike,
      expiry: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setResolver: TypedContractMethod<
    [name: BytesLike, tld: BytesLike, resolver_: AddressLike],
    [void],
    "nonpayable"
  >;

  setUser: TypedContractMethod<
    [name: BytesLike, tld: BytesLike, user: AddressLike, expiry: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceID: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BRIDGE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REGISTRAR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROOT_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WRAPPER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bridge"
  ): TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getExpiry"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getResolver"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenId"
  ): TypedContractMethod<[name_: BytesLike, tld: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUser"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserExpiry"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isExists"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isLive"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOperator"
  ): TypedContractMethod<
    [name: BytesLike, tld: BytesLike, _operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExpiry"
  ): TypedContractMethod<
    [name: BytesLike, tld: BytesLike, expiry: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOperator"
  ): TypedContractMethod<
    [
      name: BytesLike,
      tld: BytesLike,
      operator_: AddressLike,
      approved: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<
    [name: BytesLike, tld: BytesLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRecord"
  ): TypedContractMethod<
    [
      name: BytesLike,
      tld: BytesLike,
      owner: AddressLike,
      resolver: AddressLike,
      expiry: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setResolver"
  ): TypedContractMethod<
    [name: BytesLike, tld: BytesLike, resolver_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUser"
  ): TypedContractMethod<
    [name: BytesLike, tld: BytesLike, user: AddressLike, expiry: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceID: BytesLike], [boolean], "view">;

  getEvent(
    key: "DomainBridged"
  ): TypedContractEvent<
    DomainBridgedEvent.InputTuple,
    DomainBridgedEvent.OutputTuple,
    DomainBridgedEvent.OutputObject
  >;
  getEvent(
    key: "NewDomain"
  ): TypedContractEvent<
    NewDomainEvent.InputTuple,
    NewDomainEvent.OutputTuple,
    NewDomainEvent.OutputObject
  >;
  getEvent(
    key: "RemoveDomain"
  ): TypedContractEvent<
    RemoveDomainEvent.InputTuple,
    RemoveDomainEvent.OutputTuple,
    RemoveDomainEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetDomainExpiry"
  ): TypedContractEvent<
    SetDomainExpiryEvent.InputTuple,
    SetDomainExpiryEvent.OutputTuple,
    SetDomainExpiryEvent.OutputObject
  >;
  getEvent(
    key: "SetDomainOperator"
  ): TypedContractEvent<
    SetDomainOperatorEvent.InputTuple,
    SetDomainOperatorEvent.OutputTuple,
    SetDomainOperatorEvent.OutputObject
  >;
  getEvent(
    key: "SetDomainOwner"
  ): TypedContractEvent<
    SetDomainOwnerEvent.InputTuple,
    SetDomainOwnerEvent.OutputTuple,
    SetDomainOwnerEvent.OutputObject
  >;
  getEvent(
    key: "SetDomainResolver"
  ): TypedContractEvent<
    SetDomainResolverEvent.InputTuple,
    SetDomainResolverEvent.OutputTuple,
    SetDomainResolverEvent.OutputObject
  >;
  getEvent(
    key: "SetDomainUser"
  ): TypedContractEvent<
    SetDomainUserEvent.InputTuple,
    SetDomainUserEvent.OutputTuple,
    SetDomainUserEvent.OutputObject
  >;

  filters: {
    "DomainBridged(bytes32,bytes32,uint8)": TypedContractEvent<
      DomainBridgedEvent.InputTuple,
      DomainBridgedEvent.OutputTuple,
      DomainBridgedEvent.OutputObject
    >;
    DomainBridged: TypedContractEvent<
      DomainBridgedEvent.InputTuple,
      DomainBridgedEvent.OutputTuple,
      DomainBridgedEvent.OutputObject
    >;

    "NewDomain(bytes,bytes,address,uint64)": TypedContractEvent<
      NewDomainEvent.InputTuple,
      NewDomainEvent.OutputTuple,
      NewDomainEvent.OutputObject
    >;
    NewDomain: TypedContractEvent<
      NewDomainEvent.InputTuple,
      NewDomainEvent.OutputTuple,
      NewDomainEvent.OutputObject
    >;

    "RemoveDomain(bytes32,bytes32)": TypedContractEvent<
      RemoveDomainEvent.InputTuple,
      RemoveDomainEvent.OutputTuple,
      RemoveDomainEvent.OutputObject
    >;
    RemoveDomain: TypedContractEvent<
      RemoveDomainEvent.InputTuple,
      RemoveDomainEvent.OutputTuple,
      RemoveDomainEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetDomainExpiry(bytes32,bytes32,uint64)": TypedContractEvent<
      SetDomainExpiryEvent.InputTuple,
      SetDomainExpiryEvent.OutputTuple,
      SetDomainExpiryEvent.OutputObject
    >;
    SetDomainExpiry: TypedContractEvent<
      SetDomainExpiryEvent.InputTuple,
      SetDomainExpiryEvent.OutputTuple,
      SetDomainExpiryEvent.OutputObject
    >;

    "SetDomainOperator(bytes32,bytes32,address,bool)": TypedContractEvent<
      SetDomainOperatorEvent.InputTuple,
      SetDomainOperatorEvent.OutputTuple,
      SetDomainOperatorEvent.OutputObject
    >;
    SetDomainOperator: TypedContractEvent<
      SetDomainOperatorEvent.InputTuple,
      SetDomainOperatorEvent.OutputTuple,
      SetDomainOperatorEvent.OutputObject
    >;

    "SetDomainOwner(bytes32,bytes32,address)": TypedContractEvent<
      SetDomainOwnerEvent.InputTuple,
      SetDomainOwnerEvent.OutputTuple,
      SetDomainOwnerEvent.OutputObject
    >;
    SetDomainOwner: TypedContractEvent<
      SetDomainOwnerEvent.InputTuple,
      SetDomainOwnerEvent.OutputTuple,
      SetDomainOwnerEvent.OutputObject
    >;

    "SetDomainResolver(bytes32,bytes32,address)": TypedContractEvent<
      SetDomainResolverEvent.InputTuple,
      SetDomainResolverEvent.OutputTuple,
      SetDomainResolverEvent.OutputObject
    >;
    SetDomainResolver: TypedContractEvent<
      SetDomainResolverEvent.InputTuple,
      SetDomainResolverEvent.OutputTuple,
      SetDomainResolverEvent.OutputObject
    >;

    "SetDomainUser(bytes32,bytes32,address,uint64)": TypedContractEvent<
      SetDomainUserEvent.InputTuple,
      SetDomainUserEvent.OutputTuple,
      SetDomainUserEvent.OutputObject
    >;
    SetDomainUser: TypedContractEvent<
      SetDomainUserEvent.InputTuple,
      SetDomainUserEvent.OutputTuple,
      SetDomainUserEvent.OutputObject
    >;
  };
}
