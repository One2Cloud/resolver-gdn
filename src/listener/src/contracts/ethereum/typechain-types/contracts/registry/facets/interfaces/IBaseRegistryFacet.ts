/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type TokenRecordStruct = {
  kind: BigNumberish;
  tld: BytesLike;
  domain: BytesLike;
  host: BytesLike;
};

export type TokenRecordStructOutput = [
  kind: bigint,
  tld: string,
  domain: string,
  host: string
] & { kind: bigint; tld: string; domain: string; host: string };

export interface IBaseRegistryFacetInterface extends Interface {
  getFunction(
    nameOrSignature: "getGracePeriod" | "getTokenRecord" | "setDefaultWrapper"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SetDefaultWrapper"): EventFragment;

  encodeFunctionData(
    functionFragment: "getGracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultWrapper",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultWrapper",
    data: BytesLike
  ): Result;
}

export namespace SetDefaultWrapperEvent {
  export type InputTuple = [wrapper: AddressLike];
  export type OutputTuple = [wrapper: string];
  export interface OutputObject {
    wrapper: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IBaseRegistryFacet extends BaseContract {
  connect(runner?: ContractRunner | null): IBaseRegistryFacet;
  waitForDeployment(): Promise<this>;

  interface: IBaseRegistryFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getGracePeriod: TypedContractMethod<[], [bigint], "view">;

  getTokenRecord: TypedContractMethod<
    [tokenId: BigNumberish],
    [TokenRecordStructOutput],
    "view"
  >;

  setDefaultWrapper: TypedContractMethod<
    [defaultWrapper: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getGracePeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenRecord"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [TokenRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "setDefaultWrapper"
  ): TypedContractMethod<[defaultWrapper: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "SetDefaultWrapper"
  ): TypedContractEvent<
    SetDefaultWrapperEvent.InputTuple,
    SetDefaultWrapperEvent.OutputTuple,
    SetDefaultWrapperEvent.OutputObject
  >;

  filters: {
    "SetDefaultWrapper(address)": TypedContractEvent<
      SetDefaultWrapperEvent.InputTuple,
      SetDefaultWrapperEvent.OutputTuple,
      SetDefaultWrapperEvent.OutputObject
    >;
    SetDefaultWrapper: TypedContractEvent<
      SetDefaultWrapperEvent.InputTuple,
      SetDefaultWrapperEvent.OutputTuple,
      SetDefaultWrapperEvent.OutputObject
    >;
  };
}
