/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type TokenRecordStruct = {
  kind: BigNumberish;
  tld: BytesLike;
  domain: BytesLike;
  host: BytesLike;
};

export type TokenRecordStructOutput = [
  kind: bigint,
  tld: string,
  domain: string,
  host: string
] & { kind: bigint; tld: string; domain: string; host: string };

export type WrapperRecordStruct = { enable: boolean; address_: AddressLike };

export type WrapperRecordStructOutput = [enable: boolean, address_: string] & {
  enable: boolean;
  address_: string;
};

export interface IRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "BRIDGE_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR_ROLE"
      | "REGISTRAR_ROLE"
      | "ROOT_ROLE"
      | "WRAPPER_ROLE"
      | "bridge"
      | "getChains"
      | "getClass"
      | "getExpiry(bytes32)"
      | "getExpiry(bytes32,bytes32)"
      | "getGracePeriod"
      | "getOwner(bytes32,bytes32)"
      | "getOwner(bytes32)"
      | "getResolver(bytes32,bytes32)"
      | "getResolver(bytes32)"
      | "getRoleAdmin"
      | "getTokenId(bytes)"
      | "getTokenId(bytes,bytes,bytes)"
      | "getTokenId(bytes,bytes)"
      | "getTokenRecord"
      | "getTtl"
      | "getUser(bytes32,bytes32,bytes32)"
      | "getUser(bytes32,bytes32)"
      | "getUserExpiry(bytes32,bytes32)"
      | "getUserExpiry(bytes32,bytes32,bytes32)"
      | "getWrapper"
      | "grantRole"
      | "hasRole"
      | "isEnable"
      | "isExists(bytes32,bytes32)"
      | "isExists(bytes32)"
      | "isExists(bytes32,bytes32,bytes32)"
      | "isLive"
      | "isOperator(bytes32,bytes32,bytes32,address)"
      | "isOperator(bytes32,bytes32,address)"
      | "renounceRole"
      | "revokeRole"
      | "setDefaultWrapper"
      | "setEnable"
      | "setExpiry(bytes32,bytes32,uint64)"
      | "setExpiry(bytes32,uint64)"
      | "setOperator(bytes32,bytes32,address,bool)"
      | "setOperator(bytes32,bytes32,bytes32,address,bool)"
      | "setOwner(bytes32,bytes32,address)"
      | "setOwner(bytes32,address)"
      | "setRecord(bytes,bytes,bytes,uint16)"
      | "setRecord(bytes,bytes,address,address,uint64)"
      | "setRecord(uint8[],bytes,address,address,uint64,bool,uint8)"
      | "setResolver(bytes32,address)"
      | "setResolver(bytes32,bytes32,address)"
      | "setUser(bytes32,bytes32,address,uint64)"
      | "setUser(bytes32,bytes32,bytes32,address,uint64)"
      | "setWrapper"
      | "supportsInterface"
      | "unsetRecord"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DomainBridged"
      | "NewDomain"
      | "NewHost"
      | "NewTld"
      | "RemoveDomain"
      | "RemoveHost"
      | "RemoveTld"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetDefaultWrapper"
      | "SetDomainExpiry"
      | "SetDomainOperator"
      | "SetDomainOwner"
      | "SetDomainResolver"
      | "SetDomainUser"
      | "SetHostOperator"
      | "SetHostUser"
      | "SetTldEnable"
      | "SetTldExpiry"
      | "SetTldOwner"
      | "SetTldResolver"
      | "SetTldWrapper"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BRIDGE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTRAR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROOT_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WRAPPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridge",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChains",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getClass", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getExpiry(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpiry(bytes32,bytes32)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOwner(bytes32,bytes32)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwner(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getResolver(bytes32,bytes32)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getResolver(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenId(bytes)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenId(bytes,bytes,bytes)",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenId(bytes,bytes)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTtl",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUser(bytes32,bytes32,bytes32)",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUser(bytes32,bytes32)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserExpiry(bytes32,bytes32)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserExpiry(bytes32,bytes32,bytes32)",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWrapper",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isEnable", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "isExists(bytes32,bytes32)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExists(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExists(bytes32,bytes32,bytes32)",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLive",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator(bytes32,bytes32,bytes32,address)",
    values: [BytesLike, BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator(bytes32,bytes32,address)",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultWrapper",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEnable",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpiry(bytes32,bytes32,uint64)",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpiry(bytes32,uint64)",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator(bytes32,bytes32,address,bool)",
    values: [BytesLike, BytesLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperator(bytes32,bytes32,bytes32,address,bool)",
    values: [BytesLike, BytesLike, BytesLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner(bytes32,bytes32,address)",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner(bytes32,address)",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecord(bytes,bytes,bytes,uint16)",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecord(bytes,bytes,address,address,uint64)",
    values: [BytesLike, BytesLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecord(uint8[],bytes,address,address,uint64,bool,uint8)",
    values: [
      BigNumberish[],
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setResolver(bytes32,address)",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setResolver(bytes32,bytes32,address)",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUser(bytes32,bytes32,address,uint64)",
    values: [BytesLike, BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUser(bytes32,bytes32,bytes32,address,uint64)",
    values: [BytesLike, BytesLike, BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrapper",
    values: [BytesLike, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetRecord",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BRIDGE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRAR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROOT_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WRAPPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getChains", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getClass", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExpiry(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpiry(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwner(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwner(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResolver(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResolver(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenId(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenId(bytes,bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenId(bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTtl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUser(bytes32,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUser(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserExpiry(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserExpiry(bytes32,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWrapper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEnable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isExists(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExists(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExists(bytes32,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isLive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOperator(bytes32,bytes32,bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperator(bytes32,bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setEnable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExpiry(bytes32,bytes32,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpiry(bytes32,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator(bytes32,bytes32,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator(bytes32,bytes32,bytes32,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOwner(bytes32,bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOwner(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecord(bytes,bytes,bytes,uint16)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecord(bytes,bytes,address,address,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecord(uint8[],bytes,address,address,uint64,bool,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setResolver(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setResolver(bytes32,bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUser(bytes32,bytes32,address,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUser(bytes32,bytes32,bytes32,address,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWrapper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsetRecord",
    data: BytesLike
  ): Result;
}

export namespace DomainBridgedEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    dstChain: BigNumberish
  ];
  export type OutputTuple = [name: string, tld: string, dstChain: bigint];
  export interface OutputObject {
    name: string;
    tld: string;
    dstChain: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewDomainEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    owner: AddressLike,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    name: string,
    tld: string,
    owner: string,
    expiry: bigint
  ];
  export interface OutputObject {
    name: string;
    tld: string;
    owner: string;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewHostEvent {
  export type InputTuple = [
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    ttl: BigNumberish
  ];
  export type OutputTuple = [
    host: string,
    name: string,
    tld: string,
    ttl: bigint
  ];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
    ttl: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewTldEvent {
  export type InputTuple = [
    class_: BigNumberish,
    tld: BytesLike,
    owner: AddressLike
  ];
  export type OutputTuple = [class_: bigint, tld: string, owner: string];
  export interface OutputObject {
    class_: bigint;
    tld: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveDomainEvent {
  export type InputTuple = [name: BytesLike, tld: BytesLike];
  export type OutputTuple = [name: string, tld: string];
  export interface OutputObject {
    name: string;
    tld: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveHostEvent {
  export type InputTuple = [host: BytesLike, name: BytesLike, tld: BytesLike];
  export type OutputTuple = [host: string, name: string, tld: string];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveTldEvent {
  export type InputTuple = [tld: BytesLike];
  export type OutputTuple = [tld: string];
  export interface OutputObject {
    tld: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDefaultWrapperEvent {
  export type InputTuple = [wrapper: AddressLike];
  export type OutputTuple = [wrapper: string];
  export interface OutputObject {
    wrapper: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDomainExpiryEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    expiry: BigNumberish
  ];
  export type OutputTuple = [name: string, tld: string, expiry: bigint];
  export interface OutputObject {
    name: string;
    tld: string;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDomainOperatorEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    name: string,
    tld: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    name: string;
    tld: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDomainOwnerEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    owner: AddressLike
  ];
  export type OutputTuple = [name: string, tld: string, owner: string];
  export interface OutputObject {
    name: string;
    tld: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDomainResolverEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    newResolver: AddressLike
  ];
  export type OutputTuple = [name: string, tld: string, newResolver: string];
  export interface OutputObject {
    name: string;
    tld: string;
    newResolver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDomainUserEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    newUser: AddressLike,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    name: string,
    tld: string,
    newUser: string,
    expiry: bigint
  ];
  export interface OutputObject {
    name: string;
    tld: string;
    newUser: string;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetHostOperatorEvent {
  export type InputTuple = [
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    host: string,
    name: string,
    tld: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetHostUserEvent {
  export type InputTuple = [
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    newUser: AddressLike,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    host: string,
    name: string,
    tld: string,
    newUser: string,
    expiry: bigint
  ];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
    newUser: string;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTldEnableEvent {
  export type InputTuple = [tld: BytesLike, enable: boolean];
  export type OutputTuple = [tld: string, enable: boolean];
  export interface OutputObject {
    tld: string;
    enable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTldExpiryEvent {
  export type InputTuple = [tld: BytesLike, expiry: BigNumberish];
  export type OutputTuple = [tld: string, expiry: bigint];
  export interface OutputObject {
    tld: string;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTldOwnerEvent {
  export type InputTuple = [tld: BytesLike, owner: AddressLike];
  export type OutputTuple = [tld: string, owner: string];
  export interface OutputObject {
    tld: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTldResolverEvent {
  export type InputTuple = [tld: BytesLike, resolver: AddressLike];
  export type OutputTuple = [tld: string, resolver: string];
  export interface OutputObject {
    tld: string;
    resolver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTldWrapperEvent {
  export type InputTuple = [
    tld: BytesLike,
    wrapper: AddressLike,
    enable: boolean
  ];
  export type OutputTuple = [tld: string, wrapper: string, enable: boolean];
  export interface OutputObject {
    tld: string;
    wrapper: string;
    enable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IRegistry;
  waitForDeployment(): Promise<this>;

  interface: IRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  BRIDGE_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  REGISTRAR_ROLE: TypedContractMethod<[], [string], "view">;

  ROOT_ROLE: TypedContractMethod<[], [string], "view">;

  WRAPPER_ROLE: TypedContractMethod<[], [string], "view">;

  bridge: TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [void],
    "nonpayable"
  >;

  getChains: TypedContractMethod<[tld: BytesLike], [bigint[]], "view">;

  getClass: TypedContractMethod<[tld: BytesLike], [bigint], "view">;

  "getExpiry(bytes32)": TypedContractMethod<[tld: BytesLike], [bigint], "view">;

  "getExpiry(bytes32,bytes32)": TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [bigint],
    "view"
  >;

  getGracePeriod: TypedContractMethod<[], [bigint], "view">;

  "getOwner(bytes32,bytes32)": TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [string],
    "view"
  >;

  "getOwner(bytes32)": TypedContractMethod<[tld: BytesLike], [string], "view">;

  "getResolver(bytes32,bytes32)": TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [string],
    "view"
  >;

  "getResolver(bytes32)": TypedContractMethod<
    [tld: BytesLike],
    [string],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  "getTokenId(bytes)": TypedContractMethod<
    [tld: BytesLike],
    [bigint],
    "nonpayable"
  >;

  "getTokenId(bytes,bytes,bytes)": TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [bigint],
    "nonpayable"
  >;

  "getTokenId(bytes,bytes)": TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [bigint],
    "nonpayable"
  >;

  getTokenRecord: TypedContractMethod<
    [tokenId: BigNumberish],
    [TokenRecordStructOutput],
    "view"
  >;

  getTtl: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [bigint],
    "view"
  >;

  "getUser(bytes32,bytes32,bytes32)": TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [string],
    "view"
  >;

  "getUser(bytes32,bytes32)": TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [string],
    "view"
  >;

  "getUserExpiry(bytes32,bytes32)": TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [bigint],
    "view"
  >;

  "getUserExpiry(bytes32,bytes32,bytes32)": TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [bigint],
    "view"
  >;

  getWrapper: TypedContractMethod<
    [tld: BytesLike],
    [WrapperRecordStructOutput],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isEnable: TypedContractMethod<[tld: BytesLike], [boolean], "view">;

  "isExists(bytes32,bytes32)": TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [boolean],
    "view"
  >;

  "isExists(bytes32)": TypedContractMethod<[tld: BytesLike], [boolean], "view">;

  "isExists(bytes32,bytes32,bytes32)": TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [boolean],
    "view"
  >;

  isLive: TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [boolean],
    "view"
  >;

  "isOperator(bytes32,bytes32,bytes32,address)": TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, _operator: AddressLike],
    [boolean],
    "view"
  >;

  "isOperator(bytes32,bytes32,address)": TypedContractMethod<
    [name: BytesLike, tld: BytesLike, _operator: AddressLike],
    [boolean],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setDefaultWrapper: TypedContractMethod<
    [defaultWrapper: AddressLike],
    [void],
    "nonpayable"
  >;

  setEnable: TypedContractMethod<
    [tld: BytesLike, enable: boolean],
    [void],
    "nonpayable"
  >;

  "setExpiry(bytes32,bytes32,uint64)": TypedContractMethod<
    [name: BytesLike, tld: BytesLike, expiry: BigNumberish],
    [void],
    "nonpayable"
  >;

  "setExpiry(bytes32,uint64)": TypedContractMethod<
    [tld: BytesLike, expiry: BigNumberish],
    [void],
    "nonpayable"
  >;

  "setOperator(bytes32,bytes32,address,bool)": TypedContractMethod<
    [name: BytesLike, tld: BytesLike, operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  "setOperator(bytes32,bytes32,bytes32,address,bool)": TypedContractMethod<
    [
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      operator: AddressLike,
      approved: boolean
    ],
    [void],
    "nonpayable"
  >;

  "setOwner(bytes32,bytes32,address)": TypedContractMethod<
    [name: BytesLike, tld: BytesLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  "setOwner(bytes32,address)": TypedContractMethod<
    [tld: BytesLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  "setRecord(bytes,bytes,bytes,uint16)": TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, ttl: BigNumberish],
    [void],
    "nonpayable"
  >;

  "setRecord(bytes,bytes,address,address,uint64)": TypedContractMethod<
    [
      name: BytesLike,
      tld: BytesLike,
      owner: AddressLike,
      resolver: AddressLike,
      expiry: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "setRecord(uint8[],bytes,address,address,uint64,bool,uint8)": TypedContractMethod<
    [
      chains: BigNumberish[],
      tld: BytesLike,
      owner: AddressLike,
      resolver: AddressLike,
      expiry: BigNumberish,
      enable: boolean,
      class_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "setResolver(bytes32,address)": TypedContractMethod<
    [tld: BytesLike, resolver: AddressLike],
    [void],
    "nonpayable"
  >;

  "setResolver(bytes32,bytes32,address)": TypedContractMethod<
    [name: BytesLike, tld: BytesLike, resolver: AddressLike],
    [void],
    "nonpayable"
  >;

  "setUser(bytes32,bytes32,address,uint64)": TypedContractMethod<
    [name: BytesLike, tld: BytesLike, user: AddressLike, expiry: BigNumberish],
    [void],
    "nonpayable"
  >;

  "setUser(bytes32,bytes32,bytes32,address,uint64)": TypedContractMethod<
    [
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      user: AddressLike,
      expiry: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setWrapper: TypedContractMethod<
    [tld: BytesLike, enable_: boolean, wrapper: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unsetRecord: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BRIDGE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REGISTRAR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROOT_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WRAPPER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bridge"
  ): TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getChains"
  ): TypedContractMethod<[tld: BytesLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getClass"
  ): TypedContractMethod<[tld: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getExpiry(bytes32)"
  ): TypedContractMethod<[tld: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getExpiry(bytes32,bytes32)"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGracePeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOwner(bytes32,bytes32)"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getOwner(bytes32)"
  ): TypedContractMethod<[tld: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getResolver(bytes32,bytes32)"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getResolver(bytes32)"
  ): TypedContractMethod<[tld: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenId(bytes)"
  ): TypedContractMethod<[tld: BytesLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getTokenId(bytes,bytes,bytes)"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTokenId(bytes,bytes)"
  ): TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTokenRecord"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [TokenRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTtl"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUser(bytes32,bytes32,bytes32)"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUser(bytes32,bytes32)"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserExpiry(bytes32,bytes32)"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserExpiry(bytes32,bytes32,bytes32)"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWrapper"
  ): TypedContractMethod<[tld: BytesLike], [WrapperRecordStructOutput], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isEnable"
  ): TypedContractMethod<[tld: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExists(bytes32,bytes32)"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExists(bytes32)"
  ): TypedContractMethod<[tld: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExists(bytes32,bytes32,bytes32)"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isLive"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOperator(bytes32,bytes32,bytes32,address)"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, _operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isOperator(bytes32,bytes32,address)"
  ): TypedContractMethod<
    [name: BytesLike, tld: BytesLike, _operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultWrapper"
  ): TypedContractMethod<[defaultWrapper: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEnable"
  ): TypedContractMethod<
    [tld: BytesLike, enable: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExpiry(bytes32,bytes32,uint64)"
  ): TypedContractMethod<
    [name: BytesLike, tld: BytesLike, expiry: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExpiry(bytes32,uint64)"
  ): TypedContractMethod<
    [tld: BytesLike, expiry: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOperator(bytes32,bytes32,address,bool)"
  ): TypedContractMethod<
    [name: BytesLike, tld: BytesLike, operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOperator(bytes32,bytes32,bytes32,address,bool)"
  ): TypedContractMethod<
    [
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      operator: AddressLike,
      approved: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOwner(bytes32,bytes32,address)"
  ): TypedContractMethod<
    [name: BytesLike, tld: BytesLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOwner(bytes32,address)"
  ): TypedContractMethod<
    [tld: BytesLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRecord(bytes,bytes,bytes,uint16)"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, ttl: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRecord(bytes,bytes,address,address,uint64)"
  ): TypedContractMethod<
    [
      name: BytesLike,
      tld: BytesLike,
      owner: AddressLike,
      resolver: AddressLike,
      expiry: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRecord(uint8[],bytes,address,address,uint64,bool,uint8)"
  ): TypedContractMethod<
    [
      chains: BigNumberish[],
      tld: BytesLike,
      owner: AddressLike,
      resolver: AddressLike,
      expiry: BigNumberish,
      enable: boolean,
      class_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setResolver(bytes32,address)"
  ): TypedContractMethod<
    [tld: BytesLike, resolver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setResolver(bytes32,bytes32,address)"
  ): TypedContractMethod<
    [name: BytesLike, tld: BytesLike, resolver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUser(bytes32,bytes32,address,uint64)"
  ): TypedContractMethod<
    [name: BytesLike, tld: BytesLike, user: AddressLike, expiry: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUser(bytes32,bytes32,bytes32,address,uint64)"
  ): TypedContractMethod<
    [
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      user: AddressLike,
      expiry: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWrapper"
  ): TypedContractMethod<
    [tld: BytesLike, enable_: boolean, wrapper: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unsetRecord"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DomainBridged"
  ): TypedContractEvent<
    DomainBridgedEvent.InputTuple,
    DomainBridgedEvent.OutputTuple,
    DomainBridgedEvent.OutputObject
  >;
  getEvent(
    key: "NewDomain"
  ): TypedContractEvent<
    NewDomainEvent.InputTuple,
    NewDomainEvent.OutputTuple,
    NewDomainEvent.OutputObject
  >;
  getEvent(
    key: "NewHost"
  ): TypedContractEvent<
    NewHostEvent.InputTuple,
    NewHostEvent.OutputTuple,
    NewHostEvent.OutputObject
  >;
  getEvent(
    key: "NewTld"
  ): TypedContractEvent<
    NewTldEvent.InputTuple,
    NewTldEvent.OutputTuple,
    NewTldEvent.OutputObject
  >;
  getEvent(
    key: "RemoveDomain"
  ): TypedContractEvent<
    RemoveDomainEvent.InputTuple,
    RemoveDomainEvent.OutputTuple,
    RemoveDomainEvent.OutputObject
  >;
  getEvent(
    key: "RemoveHost"
  ): TypedContractEvent<
    RemoveHostEvent.InputTuple,
    RemoveHostEvent.OutputTuple,
    RemoveHostEvent.OutputObject
  >;
  getEvent(
    key: "RemoveTld"
  ): TypedContractEvent<
    RemoveTldEvent.InputTuple,
    RemoveTldEvent.OutputTuple,
    RemoveTldEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetDefaultWrapper"
  ): TypedContractEvent<
    SetDefaultWrapperEvent.InputTuple,
    SetDefaultWrapperEvent.OutputTuple,
    SetDefaultWrapperEvent.OutputObject
  >;
  getEvent(
    key: "SetDomainExpiry"
  ): TypedContractEvent<
    SetDomainExpiryEvent.InputTuple,
    SetDomainExpiryEvent.OutputTuple,
    SetDomainExpiryEvent.OutputObject
  >;
  getEvent(
    key: "SetDomainOperator"
  ): TypedContractEvent<
    SetDomainOperatorEvent.InputTuple,
    SetDomainOperatorEvent.OutputTuple,
    SetDomainOperatorEvent.OutputObject
  >;
  getEvent(
    key: "SetDomainOwner"
  ): TypedContractEvent<
    SetDomainOwnerEvent.InputTuple,
    SetDomainOwnerEvent.OutputTuple,
    SetDomainOwnerEvent.OutputObject
  >;
  getEvent(
    key: "SetDomainResolver"
  ): TypedContractEvent<
    SetDomainResolverEvent.InputTuple,
    SetDomainResolverEvent.OutputTuple,
    SetDomainResolverEvent.OutputObject
  >;
  getEvent(
    key: "SetDomainUser"
  ): TypedContractEvent<
    SetDomainUserEvent.InputTuple,
    SetDomainUserEvent.OutputTuple,
    SetDomainUserEvent.OutputObject
  >;
  getEvent(
    key: "SetHostOperator"
  ): TypedContractEvent<
    SetHostOperatorEvent.InputTuple,
    SetHostOperatorEvent.OutputTuple,
    SetHostOperatorEvent.OutputObject
  >;
  getEvent(
    key: "SetHostUser"
  ): TypedContractEvent<
    SetHostUserEvent.InputTuple,
    SetHostUserEvent.OutputTuple,
    SetHostUserEvent.OutputObject
  >;
  getEvent(
    key: "SetTldEnable"
  ): TypedContractEvent<
    SetTldEnableEvent.InputTuple,
    SetTldEnableEvent.OutputTuple,
    SetTldEnableEvent.OutputObject
  >;
  getEvent(
    key: "SetTldExpiry"
  ): TypedContractEvent<
    SetTldExpiryEvent.InputTuple,
    SetTldExpiryEvent.OutputTuple,
    SetTldExpiryEvent.OutputObject
  >;
  getEvent(
    key: "SetTldOwner"
  ): TypedContractEvent<
    SetTldOwnerEvent.InputTuple,
    SetTldOwnerEvent.OutputTuple,
    SetTldOwnerEvent.OutputObject
  >;
  getEvent(
    key: "SetTldResolver"
  ): TypedContractEvent<
    SetTldResolverEvent.InputTuple,
    SetTldResolverEvent.OutputTuple,
    SetTldResolverEvent.OutputObject
  >;
  getEvent(
    key: "SetTldWrapper"
  ): TypedContractEvent<
    SetTldWrapperEvent.InputTuple,
    SetTldWrapperEvent.OutputTuple,
    SetTldWrapperEvent.OutputObject
  >;

  filters: {
    "DomainBridged(bytes32,bytes32,uint8)": TypedContractEvent<
      DomainBridgedEvent.InputTuple,
      DomainBridgedEvent.OutputTuple,
      DomainBridgedEvent.OutputObject
    >;
    DomainBridged: TypedContractEvent<
      DomainBridgedEvent.InputTuple,
      DomainBridgedEvent.OutputTuple,
      DomainBridgedEvent.OutputObject
    >;

    "NewDomain(bytes,bytes,address,uint64)": TypedContractEvent<
      NewDomainEvent.InputTuple,
      NewDomainEvent.OutputTuple,
      NewDomainEvent.OutputObject
    >;
    NewDomain: TypedContractEvent<
      NewDomainEvent.InputTuple,
      NewDomainEvent.OutputTuple,
      NewDomainEvent.OutputObject
    >;

    "NewHost(bytes,bytes,bytes,uint16)": TypedContractEvent<
      NewHostEvent.InputTuple,
      NewHostEvent.OutputTuple,
      NewHostEvent.OutputObject
    >;
    NewHost: TypedContractEvent<
      NewHostEvent.InputTuple,
      NewHostEvent.OutputTuple,
      NewHostEvent.OutputObject
    >;

    "NewTld(uint8,bytes,address)": TypedContractEvent<
      NewTldEvent.InputTuple,
      NewTldEvent.OutputTuple,
      NewTldEvent.OutputObject
    >;
    NewTld: TypedContractEvent<
      NewTldEvent.InputTuple,
      NewTldEvent.OutputTuple,
      NewTldEvent.OutputObject
    >;

    "RemoveDomain(bytes32,bytes32)": TypedContractEvent<
      RemoveDomainEvent.InputTuple,
      RemoveDomainEvent.OutputTuple,
      RemoveDomainEvent.OutputObject
    >;
    RemoveDomain: TypedContractEvent<
      RemoveDomainEvent.InputTuple,
      RemoveDomainEvent.OutputTuple,
      RemoveDomainEvent.OutputObject
    >;

    "RemoveHost(bytes32,bytes32,bytes32)": TypedContractEvent<
      RemoveHostEvent.InputTuple,
      RemoveHostEvent.OutputTuple,
      RemoveHostEvent.OutputObject
    >;
    RemoveHost: TypedContractEvent<
      RemoveHostEvent.InputTuple,
      RemoveHostEvent.OutputTuple,
      RemoveHostEvent.OutputObject
    >;

    "RemoveTld(bytes32)": TypedContractEvent<
      RemoveTldEvent.InputTuple,
      RemoveTldEvent.OutputTuple,
      RemoveTldEvent.OutputObject
    >;
    RemoveTld: TypedContractEvent<
      RemoveTldEvent.InputTuple,
      RemoveTldEvent.OutputTuple,
      RemoveTldEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetDefaultWrapper(address)": TypedContractEvent<
      SetDefaultWrapperEvent.InputTuple,
      SetDefaultWrapperEvent.OutputTuple,
      SetDefaultWrapperEvent.OutputObject
    >;
    SetDefaultWrapper: TypedContractEvent<
      SetDefaultWrapperEvent.InputTuple,
      SetDefaultWrapperEvent.OutputTuple,
      SetDefaultWrapperEvent.OutputObject
    >;

    "SetDomainExpiry(bytes32,bytes32,uint64)": TypedContractEvent<
      SetDomainExpiryEvent.InputTuple,
      SetDomainExpiryEvent.OutputTuple,
      SetDomainExpiryEvent.OutputObject
    >;
    SetDomainExpiry: TypedContractEvent<
      SetDomainExpiryEvent.InputTuple,
      SetDomainExpiryEvent.OutputTuple,
      SetDomainExpiryEvent.OutputObject
    >;

    "SetDomainOperator(bytes32,bytes32,address,bool)": TypedContractEvent<
      SetDomainOperatorEvent.InputTuple,
      SetDomainOperatorEvent.OutputTuple,
      SetDomainOperatorEvent.OutputObject
    >;
    SetDomainOperator: TypedContractEvent<
      SetDomainOperatorEvent.InputTuple,
      SetDomainOperatorEvent.OutputTuple,
      SetDomainOperatorEvent.OutputObject
    >;

    "SetDomainOwner(bytes32,bytes32,address)": TypedContractEvent<
      SetDomainOwnerEvent.InputTuple,
      SetDomainOwnerEvent.OutputTuple,
      SetDomainOwnerEvent.OutputObject
    >;
    SetDomainOwner: TypedContractEvent<
      SetDomainOwnerEvent.InputTuple,
      SetDomainOwnerEvent.OutputTuple,
      SetDomainOwnerEvent.OutputObject
    >;

    "SetDomainResolver(bytes32,bytes32,address)": TypedContractEvent<
      SetDomainResolverEvent.InputTuple,
      SetDomainResolverEvent.OutputTuple,
      SetDomainResolverEvent.OutputObject
    >;
    SetDomainResolver: TypedContractEvent<
      SetDomainResolverEvent.InputTuple,
      SetDomainResolverEvent.OutputTuple,
      SetDomainResolverEvent.OutputObject
    >;

    "SetDomainUser(bytes32,bytes32,address,uint64)": TypedContractEvent<
      SetDomainUserEvent.InputTuple,
      SetDomainUserEvent.OutputTuple,
      SetDomainUserEvent.OutputObject
    >;
    SetDomainUser: TypedContractEvent<
      SetDomainUserEvent.InputTuple,
      SetDomainUserEvent.OutputTuple,
      SetDomainUserEvent.OutputObject
    >;

    "SetHostOperator(bytes32,bytes32,bytes32,address,bool)": TypedContractEvent<
      SetHostOperatorEvent.InputTuple,
      SetHostOperatorEvent.OutputTuple,
      SetHostOperatorEvent.OutputObject
    >;
    SetHostOperator: TypedContractEvent<
      SetHostOperatorEvent.InputTuple,
      SetHostOperatorEvent.OutputTuple,
      SetHostOperatorEvent.OutputObject
    >;

    "SetHostUser(bytes32,bytes32,bytes32,address,uint64)": TypedContractEvent<
      SetHostUserEvent.InputTuple,
      SetHostUserEvent.OutputTuple,
      SetHostUserEvent.OutputObject
    >;
    SetHostUser: TypedContractEvent<
      SetHostUserEvent.InputTuple,
      SetHostUserEvent.OutputTuple,
      SetHostUserEvent.OutputObject
    >;

    "SetTldEnable(bytes32,bool)": TypedContractEvent<
      SetTldEnableEvent.InputTuple,
      SetTldEnableEvent.OutputTuple,
      SetTldEnableEvent.OutputObject
    >;
    SetTldEnable: TypedContractEvent<
      SetTldEnableEvent.InputTuple,
      SetTldEnableEvent.OutputTuple,
      SetTldEnableEvent.OutputObject
    >;

    "SetTldExpiry(bytes32,uint64)": TypedContractEvent<
      SetTldExpiryEvent.InputTuple,
      SetTldExpiryEvent.OutputTuple,
      SetTldExpiryEvent.OutputObject
    >;
    SetTldExpiry: TypedContractEvent<
      SetTldExpiryEvent.InputTuple,
      SetTldExpiryEvent.OutputTuple,
      SetTldExpiryEvent.OutputObject
    >;

    "SetTldOwner(bytes32,address)": TypedContractEvent<
      SetTldOwnerEvent.InputTuple,
      SetTldOwnerEvent.OutputTuple,
      SetTldOwnerEvent.OutputObject
    >;
    SetTldOwner: TypedContractEvent<
      SetTldOwnerEvent.InputTuple,
      SetTldOwnerEvent.OutputTuple,
      SetTldOwnerEvent.OutputObject
    >;

    "SetTldResolver(bytes32,address)": TypedContractEvent<
      SetTldResolverEvent.InputTuple,
      SetTldResolverEvent.OutputTuple,
      SetTldResolverEvent.OutputObject
    >;
    SetTldResolver: TypedContractEvent<
      SetTldResolverEvent.InputTuple,
      SetTldResolverEvent.OutputTuple,
      SetTldResolverEvent.OutputObject
    >;

    "SetTldWrapper(bytes32,address,bool)": TypedContractEvent<
      SetTldWrapperEvent.InputTuple,
      SetTldWrapperEvent.OutputTuple,
      SetTldWrapperEvent.OutputObject
    >;
    SetTldWrapper: TypedContractEvent<
      SetTldWrapperEvent.InputTuple,
      SetTldWrapperEvent.OutputTuple,
      SetTldWrapperEvent.OutputObject
    >;
  };
}
