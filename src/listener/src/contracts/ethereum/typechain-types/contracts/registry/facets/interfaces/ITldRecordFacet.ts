/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type WrapperRecordStruct = { enable: boolean; address_: AddressLike };

export type WrapperRecordStructOutput = [enable: boolean, address_: string] & {
  enable: boolean;
  address_: string;
};

export interface ITldRecordFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getChains"
      | "getClass"
      | "getExpiry"
      | "getOwner"
      | "getResolver"
      | "getTokenId"
      | "getWrapper"
      | "isEnable"
      | "isExists"
      | "setEnable"
      | "setExpiry"
      | "setOwner"
      | "setRecord"
      | "setResolver"
      | "setWrapper"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NewTld"
      | "RemoveTld"
      | "SetTldEnable"
      | "SetTldExpiry"
      | "SetTldOwner"
      | "SetTldResolver"
      | "SetTldWrapper"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getChains",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getClass", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getExpiry",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getResolver",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWrapper",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isEnable", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "isExists", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "setEnable",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpiry",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecord",
    values: [
      BigNumberish[],
      BytesLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setResolver",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrapper",
    values: [BytesLike, boolean, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "getChains", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getClass", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getExpiry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTokenId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWrapper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEnable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setEnable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setExpiry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRecord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWrapper", data: BytesLike): Result;
}

export namespace NewTldEvent {
  export type InputTuple = [
    class_: BigNumberish,
    tld: BytesLike,
    owner: AddressLike
  ];
  export type OutputTuple = [class_: bigint, tld: string, owner: string];
  export interface OutputObject {
    class_: bigint;
    tld: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveTldEvent {
  export type InputTuple = [tld: BytesLike];
  export type OutputTuple = [tld: string];
  export interface OutputObject {
    tld: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTldEnableEvent {
  export type InputTuple = [tld: BytesLike, enable: boolean];
  export type OutputTuple = [tld: string, enable: boolean];
  export interface OutputObject {
    tld: string;
    enable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTldExpiryEvent {
  export type InputTuple = [tld: BytesLike, expiry: BigNumberish];
  export type OutputTuple = [tld: string, expiry: bigint];
  export interface OutputObject {
    tld: string;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTldOwnerEvent {
  export type InputTuple = [tld: BytesLike, owner: AddressLike];
  export type OutputTuple = [tld: string, owner: string];
  export interface OutputObject {
    tld: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTldResolverEvent {
  export type InputTuple = [tld: BytesLike, resolver: AddressLike];
  export type OutputTuple = [tld: string, resolver: string];
  export interface OutputObject {
    tld: string;
    resolver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTldWrapperEvent {
  export type InputTuple = [
    tld: BytesLike,
    wrapper: AddressLike,
    enable: boolean
  ];
  export type OutputTuple = [tld: string, wrapper: string, enable: boolean];
  export interface OutputObject {
    tld: string;
    wrapper: string;
    enable: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITldRecordFacet extends BaseContract {
  connect(runner?: ContractRunner | null): ITldRecordFacet;
  waitForDeployment(): Promise<this>;

  interface: ITldRecordFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getChains: TypedContractMethod<[tld: BytesLike], [bigint[]], "view">;

  getClass: TypedContractMethod<[tld: BytesLike], [bigint], "view">;

  getExpiry: TypedContractMethod<[tld: BytesLike], [bigint], "view">;

  getOwner: TypedContractMethod<[tld: BytesLike], [string], "view">;

  getResolver: TypedContractMethod<[tld: BytesLike], [string], "view">;

  getTokenId: TypedContractMethod<[tld: BytesLike], [bigint], "nonpayable">;

  getWrapper: TypedContractMethod<
    [tld: BytesLike],
    [WrapperRecordStructOutput],
    "view"
  >;

  isEnable: TypedContractMethod<[tld: BytesLike], [boolean], "view">;

  isExists: TypedContractMethod<[tld: BytesLike], [boolean], "view">;

  setEnable: TypedContractMethod<
    [tld: BytesLike, enable: boolean],
    [void],
    "nonpayable"
  >;

  setExpiry: TypedContractMethod<
    [tld: BytesLike, expiry: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOwner: TypedContractMethod<
    [tld: BytesLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  setRecord: TypedContractMethod<
    [
      chains: BigNumberish[],
      tld: BytesLike,
      owner: AddressLike,
      resolver: AddressLike,
      expiry: BigNumberish,
      enable: boolean,
      class_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setResolver: TypedContractMethod<
    [tld: BytesLike, resolver: AddressLike],
    [void],
    "nonpayable"
  >;

  setWrapper: TypedContractMethod<
    [tld: BytesLike, enable_: boolean, wrapper: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getChains"
  ): TypedContractMethod<[tld: BytesLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getClass"
  ): TypedContractMethod<[tld: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getExpiry"
  ): TypedContractMethod<[tld: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[tld: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getResolver"
  ): TypedContractMethod<[tld: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTokenId"
  ): TypedContractMethod<[tld: BytesLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getWrapper"
  ): TypedContractMethod<[tld: BytesLike], [WrapperRecordStructOutput], "view">;
  getFunction(
    nameOrSignature: "isEnable"
  ): TypedContractMethod<[tld: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExists"
  ): TypedContractMethod<[tld: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setEnable"
  ): TypedContractMethod<
    [tld: BytesLike, enable: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExpiry"
  ): TypedContractMethod<
    [tld: BytesLike, expiry: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<
    [tld: BytesLike, newOwner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRecord"
  ): TypedContractMethod<
    [
      chains: BigNumberish[],
      tld: BytesLike,
      owner: AddressLike,
      resolver: AddressLike,
      expiry: BigNumberish,
      enable: boolean,
      class_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setResolver"
  ): TypedContractMethod<
    [tld: BytesLike, resolver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWrapper"
  ): TypedContractMethod<
    [tld: BytesLike, enable_: boolean, wrapper: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "NewTld"
  ): TypedContractEvent<
    NewTldEvent.InputTuple,
    NewTldEvent.OutputTuple,
    NewTldEvent.OutputObject
  >;
  getEvent(
    key: "RemoveTld"
  ): TypedContractEvent<
    RemoveTldEvent.InputTuple,
    RemoveTldEvent.OutputTuple,
    RemoveTldEvent.OutputObject
  >;
  getEvent(
    key: "SetTldEnable"
  ): TypedContractEvent<
    SetTldEnableEvent.InputTuple,
    SetTldEnableEvent.OutputTuple,
    SetTldEnableEvent.OutputObject
  >;
  getEvent(
    key: "SetTldExpiry"
  ): TypedContractEvent<
    SetTldExpiryEvent.InputTuple,
    SetTldExpiryEvent.OutputTuple,
    SetTldExpiryEvent.OutputObject
  >;
  getEvent(
    key: "SetTldOwner"
  ): TypedContractEvent<
    SetTldOwnerEvent.InputTuple,
    SetTldOwnerEvent.OutputTuple,
    SetTldOwnerEvent.OutputObject
  >;
  getEvent(
    key: "SetTldResolver"
  ): TypedContractEvent<
    SetTldResolverEvent.InputTuple,
    SetTldResolverEvent.OutputTuple,
    SetTldResolverEvent.OutputObject
  >;
  getEvent(
    key: "SetTldWrapper"
  ): TypedContractEvent<
    SetTldWrapperEvent.InputTuple,
    SetTldWrapperEvent.OutputTuple,
    SetTldWrapperEvent.OutputObject
  >;

  filters: {
    "NewTld(uint8,bytes,address)": TypedContractEvent<
      NewTldEvent.InputTuple,
      NewTldEvent.OutputTuple,
      NewTldEvent.OutputObject
    >;
    NewTld: TypedContractEvent<
      NewTldEvent.InputTuple,
      NewTldEvent.OutputTuple,
      NewTldEvent.OutputObject
    >;

    "RemoveTld(bytes32)": TypedContractEvent<
      RemoveTldEvent.InputTuple,
      RemoveTldEvent.OutputTuple,
      RemoveTldEvent.OutputObject
    >;
    RemoveTld: TypedContractEvent<
      RemoveTldEvent.InputTuple,
      RemoveTldEvent.OutputTuple,
      RemoveTldEvent.OutputObject
    >;

    "SetTldEnable(bytes32,bool)": TypedContractEvent<
      SetTldEnableEvent.InputTuple,
      SetTldEnableEvent.OutputTuple,
      SetTldEnableEvent.OutputObject
    >;
    SetTldEnable: TypedContractEvent<
      SetTldEnableEvent.InputTuple,
      SetTldEnableEvent.OutputTuple,
      SetTldEnableEvent.OutputObject
    >;

    "SetTldExpiry(bytes32,uint64)": TypedContractEvent<
      SetTldExpiryEvent.InputTuple,
      SetTldExpiryEvent.OutputTuple,
      SetTldExpiryEvent.OutputObject
    >;
    SetTldExpiry: TypedContractEvent<
      SetTldExpiryEvent.InputTuple,
      SetTldExpiryEvent.OutputTuple,
      SetTldExpiryEvent.OutputObject
    >;

    "SetTldOwner(bytes32,address)": TypedContractEvent<
      SetTldOwnerEvent.InputTuple,
      SetTldOwnerEvent.OutputTuple,
      SetTldOwnerEvent.OutputObject
    >;
    SetTldOwner: TypedContractEvent<
      SetTldOwnerEvent.InputTuple,
      SetTldOwnerEvent.OutputTuple,
      SetTldOwnerEvent.OutputObject
    >;

    "SetTldResolver(bytes32,address)": TypedContractEvent<
      SetTldResolverEvent.InputTuple,
      SetTldResolverEvent.OutputTuple,
      SetTldResolverEvent.OutputObject
    >;
    SetTldResolver: TypedContractEvent<
      SetTldResolverEvent.InputTuple,
      SetTldResolverEvent.OutputTuple,
      SetTldResolverEvent.OutputObject
    >;

    "SetTldWrapper(bytes32,address,bool)": TypedContractEvent<
      SetTldWrapperEvent.InputTuple,
      SetTldWrapperEvent.OutputTuple,
      SetTldWrapperEvent.OutputObject
    >;
    SetTldWrapper: TypedContractEvent<
      SetTldWrapperEvent.InputTuple,
      SetTldWrapperEvent.OutputTuple,
      SetTldWrapperEvent.OutputObject
    >;
  };
}
