/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface RegistrarInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "BRIDGE_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_LABEL_LENGTH"
      | "MIN_LABEL_LENGTH"
      | "OPERATOR_ROLE"
      | "ROOT_ROLE"
      | "controllers"
      | "getExpiry"
      | "getRoleAdmin"
      | "getSynchronizer"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isAvailable(bytes,bytes)"
      | "isAvailable(bytes)"
      | "isControllerApproved"
      | "isExists(bytes32)"
      | "isExists(bytes,bytes)"
      | "proxiableUUID"
      | "receiveSync"
      | "register"
      | "renew"
      | "renounceRole"
      | "revokeRole"
      | "setControllerApproval"
      | "setSynchronizer"
      | "supportsInterface"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "valid"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "DomainReclaimed"
      | "DomainRegistered"
      | "DomainRenewed"
      | "ExecuteSync"
      | "Initialized"
      | "RequestSync"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetController"
      | "SyncError"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BRIDGE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LABEL_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_LABEL_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROOT_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "controllers",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpiry",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSynchronizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAvailable(bytes,bytes)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAvailable(bytes)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isControllerApproved",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExists(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExists(bytes,bytes)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveSync",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [AddressLike, BytesLike, BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renew",
    values: [AddressLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setControllerApproval",
    values: [BytesLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSynchronizer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "valid", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BRIDGE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LABEL_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_LABEL_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROOT_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "controllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getExpiry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSynchronizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAvailable(bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAvailable(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isControllerApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExists(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExists(bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveSync",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renew", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setControllerApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSynchronizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "valid", data: BytesLike): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DomainReclaimedEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    owner: AddressLike
  ];
  export type OutputTuple = [name: string, tld: string, owner: string];
  export interface OutputObject {
    name: string;
    tld: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DomainRegisteredEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    owner: AddressLike,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    name: string,
    tld: string,
    owner: string,
    expiry: bigint
  ];
  export interface OutputObject {
    name: string;
    tld: string;
    owner: string;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DomainRenewedEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    expiry: BigNumberish
  ];
  export type OutputTuple = [name: string, tld: string, expiry: bigint];
  export interface OutputObject {
    name: string;
    tld: string;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteSyncEvent {
  export type InputTuple = [success: boolean, ews: BytesLike];
  export type OutputTuple = [success: boolean, ews: string];
  export interface OutputObject {
    success: boolean;
    ews: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSyncEvent {
  export type InputTuple = [ews: BytesLike];
  export type OutputTuple = [ews: string];
  export interface OutputObject {
    ews: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetControllerEvent {
  export type InputTuple = [
    tld: BytesLike,
    controller: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    tld: string,
    controller: string,
    approved: boolean
  ];
  export interface OutputObject {
    tld: string;
    controller: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SyncErrorEvent {
  export type InputTuple = [ews: BytesLike, reason: BytesLike];
  export type OutputTuple = [ews: string, reason: string];
  export interface OutputObject {
    ews: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Registrar extends BaseContract {
  connect(runner?: ContractRunner | null): Registrar;
  waitForDeployment(): Promise<this>;

  interface: RegistrarInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  BRIDGE_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_LABEL_LENGTH: TypedContractMethod<[], [bigint], "view">;

  MIN_LABEL_LENGTH: TypedContractMethod<[], [bigint], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  ROOT_ROLE: TypedContractMethod<[], [string], "view">;

  controllers: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;

  getExpiry: TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSynchronizer: TypedContractMethod<[], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [registry_: AddressLike, resolver_: AddressLike],
    [void],
    "nonpayable"
  >;

  "isAvailable(bytes,bytes)": TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [boolean],
    "view"
  >;

  "isAvailable(bytes)": TypedContractMethod<
    [tld: BytesLike],
    [boolean],
    "view"
  >;

  isControllerApproved: TypedContractMethod<
    [tld: BytesLike, controller: AddressLike],
    [boolean],
    "view"
  >;

  "isExists(bytes32)": TypedContractMethod<[tld: BytesLike], [boolean], "view">;

  "isExists(bytes,bytes)": TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [boolean],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  receiveSync: TypedContractMethod<[ews: BytesLike], [void], "nonpayable">;

  register: TypedContractMethod<
    [
      sender: AddressLike,
      name: BytesLike,
      tld: BytesLike,
      owner: AddressLike,
      expiry: BigNumberish
    ],
    [void],
    "payable"
  >;

  renew: TypedContractMethod<
    [
      sender: AddressLike,
      name: BytesLike,
      tld: BytesLike,
      expiry: BigNumberish
    ],
    [void],
    "payable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setControllerApproval: TypedContractMethod<
    [tld: BytesLike, controller: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setSynchronizer: TypedContractMethod<
    [synchronizer_: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceID: BytesLike],
    [boolean],
    "view"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  valid: TypedContractMethod<[label: BytesLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BRIDGE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_LABEL_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_LABEL_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROOT_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "controllers"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExpiry"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSynchronizer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [registry_: AddressLike, resolver_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAvailable(bytes,bytes)"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAvailable(bytes)"
  ): TypedContractMethod<[tld: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isControllerApproved"
  ): TypedContractMethod<
    [tld: BytesLike, controller: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isExists(bytes32)"
  ): TypedContractMethod<[tld: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExists(bytes,bytes)"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveSync"
  ): TypedContractMethod<[ews: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      name: BytesLike,
      tld: BytesLike,
      owner: AddressLike,
      expiry: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renew"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      name: BytesLike,
      tld: BytesLike,
      expiry: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setControllerApproval"
  ): TypedContractMethod<
    [tld: BytesLike, controller: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSynchronizer"
  ): TypedContractMethod<[synchronizer_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceID: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "valid"
  ): TypedContractMethod<[label: BytesLike], [boolean], "view">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "DomainReclaimed"
  ): TypedContractEvent<
    DomainReclaimedEvent.InputTuple,
    DomainReclaimedEvent.OutputTuple,
    DomainReclaimedEvent.OutputObject
  >;
  getEvent(
    key: "DomainRegistered"
  ): TypedContractEvent<
    DomainRegisteredEvent.InputTuple,
    DomainRegisteredEvent.OutputTuple,
    DomainRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "DomainRenewed"
  ): TypedContractEvent<
    DomainRenewedEvent.InputTuple,
    DomainRenewedEvent.OutputTuple,
    DomainRenewedEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteSync"
  ): TypedContractEvent<
    ExecuteSyncEvent.InputTuple,
    ExecuteSyncEvent.OutputTuple,
    ExecuteSyncEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RequestSync"
  ): TypedContractEvent<
    RequestSyncEvent.InputTuple,
    RequestSyncEvent.OutputTuple,
    RequestSyncEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetController"
  ): TypedContractEvent<
    SetControllerEvent.InputTuple,
    SetControllerEvent.OutputTuple,
    SetControllerEvent.OutputObject
  >;
  getEvent(
    key: "SyncError"
  ): TypedContractEvent<
    SyncErrorEvent.InputTuple,
    SyncErrorEvent.OutputTuple,
    SyncErrorEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "DomainReclaimed(bytes,bytes,address)": TypedContractEvent<
      DomainReclaimedEvent.InputTuple,
      DomainReclaimedEvent.OutputTuple,
      DomainReclaimedEvent.OutputObject
    >;
    DomainReclaimed: TypedContractEvent<
      DomainReclaimedEvent.InputTuple,
      DomainReclaimedEvent.OutputTuple,
      DomainReclaimedEvent.OutputObject
    >;

    "DomainRegistered(bytes,bytes,address,uint256)": TypedContractEvent<
      DomainRegisteredEvent.InputTuple,
      DomainRegisteredEvent.OutputTuple,
      DomainRegisteredEvent.OutputObject
    >;
    DomainRegistered: TypedContractEvent<
      DomainRegisteredEvent.InputTuple,
      DomainRegisteredEvent.OutputTuple,
      DomainRegisteredEvent.OutputObject
    >;

    "DomainRenewed(bytes,bytes,uint256)": TypedContractEvent<
      DomainRenewedEvent.InputTuple,
      DomainRenewedEvent.OutputTuple,
      DomainRenewedEvent.OutputObject
    >;
    DomainRenewed: TypedContractEvent<
      DomainRenewedEvent.InputTuple,
      DomainRenewedEvent.OutputTuple,
      DomainRenewedEvent.OutputObject
    >;

    "ExecuteSync(bool,bytes)": TypedContractEvent<
      ExecuteSyncEvent.InputTuple,
      ExecuteSyncEvent.OutputTuple,
      ExecuteSyncEvent.OutputObject
    >;
    ExecuteSync: TypedContractEvent<
      ExecuteSyncEvent.InputTuple,
      ExecuteSyncEvent.OutputTuple,
      ExecuteSyncEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RequestSync(bytes)": TypedContractEvent<
      RequestSyncEvent.InputTuple,
      RequestSyncEvent.OutputTuple,
      RequestSyncEvent.OutputObject
    >;
    RequestSync: TypedContractEvent<
      RequestSyncEvent.InputTuple,
      RequestSyncEvent.OutputTuple,
      RequestSyncEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetController(bytes32,address,bool)": TypedContractEvent<
      SetControllerEvent.InputTuple,
      SetControllerEvent.OutputTuple,
      SetControllerEvent.OutputObject
    >;
    SetController: TypedContractEvent<
      SetControllerEvent.InputTuple,
      SetControllerEvent.OutputTuple,
      SetControllerEvent.OutputObject
    >;

    "SyncError(bytes,bytes)": TypedContractEvent<
      SyncErrorEvent.InputTuple,
      SyncErrorEvent.OutputTuple,
      SyncErrorEvent.OutputObject
    >;
    SyncError: TypedContractEvent<
      SyncErrorEvent.InputTuple,
      SyncErrorEvent.OutputTuple,
      SyncErrorEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
