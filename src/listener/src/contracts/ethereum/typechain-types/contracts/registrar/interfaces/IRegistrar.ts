/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IRegistrarInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getExpiry"
      | "isAvailable(bytes,bytes)"
      | "isAvailable(bytes)"
      | "isControllerApproved"
      | "isExists(bytes32)"
      | "isExists(bytes,bytes)"
      | "register"
      | "renew"
      | "setControllerApproval"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DomainReclaimed"
      | "DomainRegistered"
      | "DomainRenewed"
      | "SetController"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getExpiry",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAvailable(bytes,bytes)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAvailable(bytes)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isControllerApproved",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExists(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExists(bytes,bytes)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [AddressLike, BytesLike, BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renew",
    values: [AddressLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setControllerApproval",
    values: [BytesLike, AddressLike, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "getExpiry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAvailable(bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAvailable(bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isControllerApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExists(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExists(bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renew", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setControllerApproval",
    data: BytesLike
  ): Result;
}

export namespace DomainReclaimedEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    owner: AddressLike
  ];
  export type OutputTuple = [name: string, tld: string, owner: string];
  export interface OutputObject {
    name: string;
    tld: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DomainRegisteredEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    owner: AddressLike,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    name: string,
    tld: string,
    owner: string,
    expiry: bigint
  ];
  export interface OutputObject {
    name: string;
    tld: string;
    owner: string;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DomainRenewedEvent {
  export type InputTuple = [
    name: BytesLike,
    tld: BytesLike,
    expiry: BigNumberish
  ];
  export type OutputTuple = [name: string, tld: string, expiry: bigint];
  export interface OutputObject {
    name: string;
    tld: string;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetControllerEvent {
  export type InputTuple = [
    tld: BytesLike,
    controller: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    tld: string,
    controller: string,
    approved: boolean
  ];
  export interface OutputObject {
    tld: string;
    controller: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRegistrar extends BaseContract {
  connect(runner?: ContractRunner | null): IRegistrar;
  waitForDeployment(): Promise<this>;

  interface: IRegistrarInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getExpiry: TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [bigint],
    "view"
  >;

  "isAvailable(bytes,bytes)": TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [boolean],
    "view"
  >;

  "isAvailable(bytes)": TypedContractMethod<
    [tld: BytesLike],
    [boolean],
    "view"
  >;

  isControllerApproved: TypedContractMethod<
    [tld: BytesLike, controller: AddressLike],
    [boolean],
    "view"
  >;

  "isExists(bytes32)": TypedContractMethod<[tld: BytesLike], [boolean], "view">;

  "isExists(bytes,bytes)": TypedContractMethod<
    [name: BytesLike, tld: BytesLike],
    [boolean],
    "view"
  >;

  register: TypedContractMethod<
    [
      sender: AddressLike,
      name: BytesLike,
      tld: BytesLike,
      owner: AddressLike,
      expiry: BigNumberish
    ],
    [void],
    "payable"
  >;

  renew: TypedContractMethod<
    [
      sender: AddressLike,
      name: BytesLike,
      tld: BytesLike,
      expiry: BigNumberish
    ],
    [void],
    "payable"
  >;

  setControllerApproval: TypedContractMethod<
    [tld: BytesLike, controller: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getExpiry"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isAvailable(bytes,bytes)"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAvailable(bytes)"
  ): TypedContractMethod<[tld: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isControllerApproved"
  ): TypedContractMethod<
    [tld: BytesLike, controller: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isExists(bytes32)"
  ): TypedContractMethod<[tld: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExists(bytes,bytes)"
  ): TypedContractMethod<[name: BytesLike, tld: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "register"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      name: BytesLike,
      tld: BytesLike,
      owner: AddressLike,
      expiry: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renew"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      name: BytesLike,
      tld: BytesLike,
      expiry: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setControllerApproval"
  ): TypedContractMethod<
    [tld: BytesLike, controller: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DomainReclaimed"
  ): TypedContractEvent<
    DomainReclaimedEvent.InputTuple,
    DomainReclaimedEvent.OutputTuple,
    DomainReclaimedEvent.OutputObject
  >;
  getEvent(
    key: "DomainRegistered"
  ): TypedContractEvent<
    DomainRegisteredEvent.InputTuple,
    DomainRegisteredEvent.OutputTuple,
    DomainRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "DomainRenewed"
  ): TypedContractEvent<
    DomainRenewedEvent.InputTuple,
    DomainRenewedEvent.OutputTuple,
    DomainRenewedEvent.OutputObject
  >;
  getEvent(
    key: "SetController"
  ): TypedContractEvent<
    SetControllerEvent.InputTuple,
    SetControllerEvent.OutputTuple,
    SetControllerEvent.OutputObject
  >;

  filters: {
    "DomainReclaimed(bytes,bytes,address)": TypedContractEvent<
      DomainReclaimedEvent.InputTuple,
      DomainReclaimedEvent.OutputTuple,
      DomainReclaimedEvent.OutputObject
    >;
    DomainReclaimed: TypedContractEvent<
      DomainReclaimedEvent.InputTuple,
      DomainReclaimedEvent.OutputTuple,
      DomainReclaimedEvent.OutputObject
    >;

    "DomainRegistered(bytes,bytes,address,uint256)": TypedContractEvent<
      DomainRegisteredEvent.InputTuple,
      DomainRegisteredEvent.OutputTuple,
      DomainRegisteredEvent.OutputObject
    >;
    DomainRegistered: TypedContractEvent<
      DomainRegisteredEvent.InputTuple,
      DomainRegisteredEvent.OutputTuple,
      DomainRegisteredEvent.OutputObject
    >;

    "DomainRenewed(bytes,bytes,uint256)": TypedContractEvent<
      DomainRenewedEvent.InputTuple,
      DomainRenewedEvent.OutputTuple,
      DomainRenewedEvent.OutputObject
    >;
    DomainRenewed: TypedContractEvent<
      DomainRenewedEvent.InputTuple,
      DomainRenewedEvent.OutputTuple,
      DomainRenewedEvent.OutputObject
    >;

    "SetController(bytes32,address,bool)": TypedContractEvent<
      SetControllerEvent.InputTuple,
      SetControllerEvent.OutputTuple,
      SetControllerEvent.OutputObject
    >;
    SetController: TypedContractEvent<
      SetControllerEvent.InputTuple,
      SetControllerEvent.OutputTuple,
      SetControllerEvent.OutputObject
    >;
  };
}
