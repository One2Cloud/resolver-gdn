/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BatchRegistrarControllerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "register(address,bytes[],bytes[],address[],uint64[],uint256[],bytes[])"
      | "register(address,bytes[],bytes[],address,uint64[])"
      | "renew(address,bytes[],bytes[],uint64[],uint256[],bytes[])"
      | "renew(address,bytes[],bytes[],uint64[])"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;

  encodeFunctionData(
    functionFragment: "register(address,bytes[],bytes[],address[],uint64[],uint256[],bytes[])",
    values: [
      AddressLike,
      BytesLike[],
      BytesLike[],
      AddressLike[],
      BigNumberish[],
      BigNumberish[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "register(address,bytes[],bytes[],address,uint64[])",
    values: [AddressLike, BytesLike[], BytesLike[], AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renew(address,bytes[],bytes[],uint64[],uint256[],bytes[])",
    values: [
      AddressLike,
      BytesLike[],
      BytesLike[],
      BigNumberish[],
      BigNumberish[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renew(address,bytes[],bytes[],uint64[])",
    values: [AddressLike, BytesLike[], BytesLike[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "register(address,bytes[],bytes[],address[],uint64[],uint256[],bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "register(address,bytes[],bytes[],address,uint64[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renew(address,bytes[],bytes[],uint64[],uint256[],bytes[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renew(address,bytes[],bytes[],uint64[])",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BatchRegistrarController extends BaseContract {
  connect(runner?: ContractRunner | null): BatchRegistrarController;
  waitForDeployment(): Promise<this>;

  interface: BatchRegistrarControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  "register(address,bytes[],bytes[],address[],uint64[],uint256[],bytes[])": TypedContractMethod<
    [
      controller: AddressLike,
      names: BytesLike[],
      tlds: BytesLike[],
      owners: AddressLike[],
      expiry: BigNumberish[],
      prices: BigNumberish[],
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  "register(address,bytes[],bytes[],address,uint64[])": TypedContractMethod<
    [
      controller: AddressLike,
      names: BytesLike[],
      tlds: BytesLike[],
      owner: AddressLike,
      expiry: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  "renew(address,bytes[],bytes[],uint64[],uint256[],bytes[])": TypedContractMethod<
    [
      controller: AddressLike,
      names: BytesLike[],
      tlds: BytesLike[],
      expiry: BigNumberish[],
      prices: BigNumberish[],
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  "renew(address,bytes[],bytes[],uint64[])": TypedContractMethod<
    [
      controller: AddressLike,
      names: BytesLike[],
      tlds: BytesLike[],
      expiry: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "register(address,bytes[],bytes[],address[],uint64[],uint256[],bytes[])"
  ): TypedContractMethod<
    [
      controller: AddressLike,
      names: BytesLike[],
      tlds: BytesLike[],
      owners: AddressLike[],
      expiry: BigNumberish[],
      prices: BigNumberish[],
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "register(address,bytes[],bytes[],address,uint64[])"
  ): TypedContractMethod<
    [
      controller: AddressLike,
      names: BytesLike[],
      tlds: BytesLike[],
      owner: AddressLike,
      expiry: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renew(address,bytes[],bytes[],uint64[],uint256[],bytes[])"
  ): TypedContractMethod<
    [
      controller: AddressLike,
      names: BytesLike[],
      tlds: BytesLike[],
      expiry: BigNumberish[],
      prices: BigNumberish[],
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renew(address,bytes[],bytes[],uint64[])"
  ): TypedContractMethod<
    [
      controller: AddressLike,
      names: BytesLike[],
      tlds: BytesLike[],
      expiry: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
  };
}
