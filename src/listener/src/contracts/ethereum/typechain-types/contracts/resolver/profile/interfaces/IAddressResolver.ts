/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IAddressResolverInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAddress"
      | "getReverseAddress"
      | "setAddress"
      | "setReverseAddress"
      | "unsetAddress"
      | "unsetReverseAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "SetAddress"
      | "SetReverseAddress"
      | "UnsetAddress"
      | "UnsetReverseAddress"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReverseAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [BytesLike, BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReverseAddress",
    values: [BytesLike, BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetAddress",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetReverseAddress",
    values: [BytesLike, BytesLike, BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReverseAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReverseAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsetReverseAddress",
    data: BytesLike
  ): Result;
}

export namespace SetAddressEvent {
  export type InputTuple = [
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    address_: AddressLike
  ];
  export type OutputTuple = [
    host: string,
    name: string,
    tld: string,
    address_: string
  ];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
    address_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetReverseAddressEvent {
  export type InputTuple = [
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    address_: AddressLike
  ];
  export type OutputTuple = [
    host: string,
    name: string,
    tld: string,
    address_: string
  ];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
    address_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsetAddressEvent {
  export type InputTuple = [host: BytesLike, name: BytesLike, tld: BytesLike];
  export type OutputTuple = [host: string, name: string, tld: string];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsetReverseAddressEvent {
  export type InputTuple = [address_: AddressLike];
  export type OutputTuple = [address_: string];
  export interface OutputObject {
    address_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

// @ts-nocheck
// @ts-ignore
export interface IAddressResolver extends BaseContract {
  connect(runner?: ContractRunner | null): IAddressResolver;
  waitForDeployment(): Promise<this>;

  interface: IAddressResolverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAddress: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [string],
    "nonpayable"
  >;

  getReverseAddress: TypedContractMethod<
    [address_: AddressLike],
    [string],
    "nonpayable"
  >;

  setAddress: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike],
    [void],
    "payable"
  >;

  setReverseAddress: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike],
    [void],
    "payable"
  >;

  unsetAddress: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [void],
    "payable"
  >;

  unsetReverseAddress: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAddress"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getReverseAddress"
  ): TypedContractMethod<[address_: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "setAddress"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setReverseAddress"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unsetAddress"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unsetReverseAddress"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "SetAddress"
  ): TypedContractEvent<
    SetAddressEvent.InputTuple,
    SetAddressEvent.OutputTuple,
    SetAddressEvent.OutputObject
  >;
  getEvent(
    key: "SetReverseAddress"
  ): TypedContractEvent<
    SetReverseAddressEvent.InputTuple,
    SetReverseAddressEvent.OutputTuple,
    SetReverseAddressEvent.OutputObject
  >;
  getEvent(
    key: "UnsetAddress"
  ): TypedContractEvent<
    UnsetAddressEvent.InputTuple,
    UnsetAddressEvent.OutputTuple,
    UnsetAddressEvent.OutputObject
  >;
  getEvent(
    key: "UnsetReverseAddress"
  ): TypedContractEvent<
    UnsetReverseAddressEvent.InputTuple,
    UnsetReverseAddressEvent.OutputTuple,
    UnsetReverseAddressEvent.OutputObject
  >;

  filters: {
    "SetAddress(bytes,bytes,bytes,address)": TypedContractEvent<
      SetAddressEvent.InputTuple,
      SetAddressEvent.OutputTuple,
      SetAddressEvent.OutputObject
    >;
    SetAddress: TypedContractEvent<
      SetAddressEvent.InputTuple,
      SetAddressEvent.OutputTuple,
      SetAddressEvent.OutputObject
    >;

    "SetReverseAddress(bytes,bytes,bytes,address)": TypedContractEvent<
      SetReverseAddressEvent.InputTuple,
      SetReverseAddressEvent.OutputTuple,
      SetReverseAddressEvent.OutputObject
    >;
    SetReverseAddress: TypedContractEvent<
      SetReverseAddressEvent.InputTuple,
      SetReverseAddressEvent.OutputTuple,
      SetReverseAddressEvent.OutputObject
    >;

    "UnsetAddress(bytes,bytes,bytes)": TypedContractEvent<
      UnsetAddressEvent.InputTuple,
      UnsetAddressEvent.OutputTuple,
      UnsetAddressEvent.OutputObject
    >;
    UnsetAddress: TypedContractEvent<
      UnsetAddressEvent.InputTuple,
      UnsetAddressEvent.OutputTuple,
      UnsetAddressEvent.OutputObject
    >;

    "UnsetReverseAddress(address)": TypedContractEvent<
      UnsetReverseAddressEvent.InputTuple,
      UnsetReverseAddressEvent.OutputTuple,
      UnsetReverseAddressEvent.OutputObject
    >;
    UnsetReverseAddress: TypedContractEvent<
      UnsetReverseAddressEvent.InputTuple,
      UnsetReverseAddressEvent.OutputTuple,
      UnsetReverseAddressEvent.OutputObject
    >;
  };
}
