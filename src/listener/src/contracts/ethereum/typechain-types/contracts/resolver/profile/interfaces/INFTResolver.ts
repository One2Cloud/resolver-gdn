/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace INFTResolver {
  export type NFTStruct = { contract_: AddressLike; tokenId: BigNumberish };

  export type NFTStructOutput = [contract_: string, tokenId: bigint] & {
    contract_: string;
    tokenId: bigint;
  };
}

export interface INFTResolverInterface extends Interface {
  getFunction(
    nameOrSignature: "getNFT" | "setNFT" | "unsetNFT"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SetNFT" | "UnsetNFT"): EventFragment;

  encodeFunctionData(
    functionFragment: "getNFT",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFT",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetNFT",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unsetNFT", data: BytesLike): Result;
}

export namespace SetNFTEvent {
  export type InputTuple = [
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    chainId: BigNumberish,
    contractAddress: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    host: string,
    name: string,
    tld: string,
    chainId: bigint,
    contractAddress: string,
    tokenId: bigint
  ];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
    chainId: bigint;
    contractAddress: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsetNFTEvent {
  export type InputTuple = [
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    chainId: BigNumberish
  ];
  export type OutputTuple = [
    host: string,
    name: string,
    tld: string,
    chainId: bigint
  ];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
    chainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface INFTResolver extends BaseContract {
  connect(runner?: ContractRunner | null): INFTResolver;
  waitForDeployment(): Promise<this>;

  interface: INFTResolverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getNFT: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, chainId: BigNumberish],
    [INFTResolver.NFTStructOutput],
    "view"
  >;

  setNFT: TypedContractMethod<
    [
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      chainId: BigNumberish,
      contract_: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "payable"
  >;

  unsetNFT: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, chainId: BigNumberish],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getNFT"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, chainId: BigNumberish],
    [INFTResolver.NFTStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "setNFT"
  ): TypedContractMethod<
    [
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      chainId: BigNumberish,
      contract_: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unsetNFT"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, chainId: BigNumberish],
    [void],
    "payable"
  >;

  getEvent(
    key: "SetNFT"
  ): TypedContractEvent<
    SetNFTEvent.InputTuple,
    SetNFTEvent.OutputTuple,
    SetNFTEvent.OutputObject
  >;
  getEvent(
    key: "UnsetNFT"
  ): TypedContractEvent<
    UnsetNFTEvent.InputTuple,
    UnsetNFTEvent.OutputTuple,
    UnsetNFTEvent.OutputObject
  >;

  filters: {
    "SetNFT(bytes,bytes,bytes,uint256,address,uint256)": TypedContractEvent<
      SetNFTEvent.InputTuple,
      SetNFTEvent.OutputTuple,
      SetNFTEvent.OutputObject
    >;
    SetNFT: TypedContractEvent<
      SetNFTEvent.InputTuple,
      SetNFTEvent.OutputTuple,
      SetNFTEvent.OutputObject
    >;

    "UnsetNFT(bytes,bytes,bytes,uint256)": TypedContractEvent<
      UnsetNFTEvent.InputTuple,
      UnsetNFTEvent.OutputTuple,
      UnsetNFTEvent.OutputObject
    >;
    UnsetNFT: TypedContractEvent<
      UnsetNFTEvent.InputTuple,
      UnsetNFTEvent.OutputTuple,
      UnsetNFTEvent.OutputObject
    >;
  };
}
