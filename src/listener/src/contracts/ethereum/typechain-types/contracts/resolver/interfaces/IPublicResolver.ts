/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../../../common";

export declare namespace INFTResolver {
	export type NFTStruct = { contract_: AddressLike; tokenId: BigNumberish };

	export type NFTStructOutput = [contract_: string, tokenId: bigint] & {
		contract_: string;
		tokenId: bigint;
	};
}

export interface IPublicResolverInterface extends Interface {
	getFunction(
		nameOrSignature:
			| "getAddress"
			| "getMultiCoinAddress"
			| "getNFT"
			| "getReverseAddress"
			| "getText"
			| "getTypedText"
			| "setAddress"
			| "setMultiCoinAddress"
			| "setNFT"
			| "setReverseAddress"
			| "setText"
			| "setTypedText"
			| "unsetAddress"
			| "unsetMultiCoinAddress"
			| "unsetNFT"
			| "unsetReverseAddress"
			| "unsetText"
			| "unsetTypedText"
	): FunctionFragment;

	getEvent(
		nameOrSignatureOrTopic:
			| "SetAddress"
			| "SetMultiCoinAddress"
			| "SetNFT"
			| "SetReverseAddress"
			| "SetText"
			| "SetTypedText"
			| "UnsetAddress"
			| "UnsetMultiCoinAddress"
			| "UnsetNFT"
			| "UnsetReverseAddress"
			| "UnsetText"
			| "UnsetTypedText"
	): EventFragment;

	encodeFunctionData(functionFragment: "getAddress", values: [BytesLike, BytesLike, BytesLike]): string;
	encodeFunctionData(functionFragment: "getMultiCoinAddress", values: [BytesLike, BytesLike, BytesLike, BigNumberish]): string;
	encodeFunctionData(functionFragment: "getNFT", values: [BytesLike, BytesLike, BytesLike, BigNumberish]): string;
	encodeFunctionData(functionFragment: "getReverseAddress", values: [AddressLike]): string;
	encodeFunctionData(functionFragment: "getText", values: [BytesLike, BytesLike, BytesLike]): string;
	encodeFunctionData(functionFragment: "getTypedText", values: [BytesLike, BytesLike, BytesLike, BytesLike]): string;
	encodeFunctionData(functionFragment: "setAddress", values: [BytesLike, BytesLike, BytesLike, AddressLike]): string;
	encodeFunctionData(functionFragment: "setMultiCoinAddress", values: [BytesLike, BytesLike, BytesLike, BigNumberish, BytesLike]): string;
	encodeFunctionData(functionFragment: "setNFT", values: [BytesLike, BytesLike, BytesLike, BigNumberish, AddressLike, BigNumberish]): string;
	encodeFunctionData(functionFragment: "setReverseAddress", values: [BytesLike, BytesLike, BytesLike, AddressLike]): string;
	encodeFunctionData(functionFragment: "setText", values: [BytesLike, BytesLike, BytesLike, string]): string;
	encodeFunctionData(functionFragment: "setTypedText", values: [BytesLike, BytesLike, BytesLike, BytesLike, string]): string;
	encodeFunctionData(functionFragment: "unsetAddress", values: [BytesLike, BytesLike, BytesLike]): string;
	encodeFunctionData(functionFragment: "unsetMultiCoinAddress", values: [BytesLike, BytesLike, BytesLike, BigNumberish]): string;
	encodeFunctionData(functionFragment: "unsetNFT", values: [BytesLike, BytesLike, BytesLike, BigNumberish]): string;
	encodeFunctionData(functionFragment: "unsetReverseAddress", values: [BytesLike, BytesLike, BytesLike, AddressLike]): string;
	encodeFunctionData(functionFragment: "unsetText", values: [BytesLike, BytesLike, BytesLike]): string;
	encodeFunctionData(functionFragment: "unsetTypedText", values: [BytesLike, BytesLike, BytesLike, BytesLike]): string;

	decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getMultiCoinAddress", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getNFT", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getReverseAddress", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getText", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "getTypedText", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setMultiCoinAddress", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setNFT", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setReverseAddress", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setText", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "setTypedText", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "unsetAddress", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "unsetMultiCoinAddress", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "unsetNFT", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "unsetReverseAddress", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "unsetText", data: BytesLike): Result;
	decodeFunctionResult(functionFragment: "unsetTypedText", data: BytesLike): Result;
}

export namespace SetAddressEvent {
	export type InputTuple = [host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike];
	export type OutputTuple = [host: string, name: string, tld: string, address_: string];
	export interface OutputObject {
		host: string;
		name: string;
		tld: string;
		address_: string;
	}
	export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMultiCoinAddressEvent {
	export type InputTuple = [host: BytesLike, name: BytesLike, tld: BytesLike, coin: BigNumberish, address_: BytesLike];
	export type OutputTuple = [host: string, name: string, tld: string, coin: bigint, address_: string];
	export interface OutputObject {
		host: string;
		name: string;
		tld: string;
		coin: bigint;
		address_: string;
	}
	export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetNFTEvent {
	export type InputTuple = [host: BytesLike, name: BytesLike, tld: BytesLike, chainId: BigNumberish, contractAddress: AddressLike, tokenId: BigNumberish];
	export type OutputTuple = [host: string, name: string, tld: string, chainId: bigint, contractAddress: string, tokenId: bigint];
	export interface OutputObject {
		host: string;
		name: string;
		tld: string;
		chainId: bigint;
		contractAddress: string;
		tokenId: bigint;
	}
	export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetReverseAddressEvent {
	export type InputTuple = [host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike];
	export type OutputTuple = [host: string, name: string, tld: string, address_: string];
	export interface OutputObject {
		host: string;
		name: string;
		tld: string;
		address_: string;
	}
	export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTextEvent {
	export type InputTuple = [host: BytesLike, name: BytesLike, tld: BytesLike, text: string];
	export type OutputTuple = [host: string, name: string, tld: string, text: string];
	export interface OutputObject {
		host: string;
		name: string;
		tld: string;
		text: string;
	}
	export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTypedTextEvent {
	export type InputTuple = [host: BytesLike, name: BytesLike, tld: BytesLike, type_: BytesLike, text: string];
	export type OutputTuple = [host: string, name: string, tld: string, type_: string, text: string];
	export interface OutputObject {
		host: string;
		name: string;
		tld: string;
		type_: string;
		text: string;
	}
	export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsetAddressEvent {
	export type InputTuple = [host: BytesLike, name: BytesLike, tld: BytesLike];
	export type OutputTuple = [host: string, name: string, tld: string];
	export interface OutputObject {
		host: string;
		name: string;
		tld: string;
	}
	export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsetMultiCoinAddressEvent {
	export type InputTuple = [host: BytesLike, name: BytesLike, tld: BytesLike, coin: BigNumberish];
	export type OutputTuple = [host: string, name: string, tld: string, coin: bigint];
	export interface OutputObject {
		host: string;
		name: string;
		tld: string;
		coin: bigint;
	}
	export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsetNFTEvent {
	export type InputTuple = [host: BytesLike, name: BytesLike, tld: BytesLike, chainId: BigNumberish];
	export type OutputTuple = [host: string, name: string, tld: string, chainId: bigint];
	export interface OutputObject {
		host: string;
		name: string;
		tld: string;
		chainId: bigint;
	}
	export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsetReverseAddressEvent {
	export type InputTuple = [address_: AddressLike];
	export type OutputTuple = [address_: string];
	export interface OutputObject {
		address_: string;
	}
	export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsetTextEvent {
	export type InputTuple = [host: BytesLike, name: BytesLike, tld: BytesLike];
	export type OutputTuple = [host: string, name: string, tld: string];
	export interface OutputObject {
		host: string;
		name: string;
		tld: string;
	}
	export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsetTypedTextEvent {
	export type InputTuple = [host: BytesLike, name: BytesLike, tld: BytesLike, type_: BytesLike];
	export type OutputTuple = [host: string, name: string, tld: string, type_: string];
	export interface OutputObject {
		host: string;
		name: string;
		tld: string;
		type_: string;
	}
	export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
	export type Filter = TypedDeferredTopicFilter<Event>;
	export type Log = TypedEventLog<Event>;
	export type LogDescription = TypedLogDescription<Event>;
}

// @ts-nocheck
// @ts-ignore
export interface IPublicResolver extends BaseContract {
	connect(runner?: ContractRunner | null): IPublicResolver;
	waitForDeployment(): Promise<this>;

	interface: IPublicResolverInterface;

	queryFilter<TCEvent extends TypedContractEvent>(
		event: TCEvent,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEventLog<TCEvent>>>;
	queryFilter<TCEvent extends TypedContractEvent>(
		filter: TypedDeferredTopicFilter<TCEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEventLog<TCEvent>>>;

	on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

	once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
	once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;

	listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
	listeners(eventName?: string): Promise<Array<Listener>>;
	removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;

	getAddress: TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike], [string], "nonpayable">;

	getMultiCoinAddress: TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, coin: BigNumberish], [string], "view">;

	getNFT: TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, chainId: BigNumberish], [INFTResolver.NFTStructOutput], "view">;

	getReverseAddress: TypedContractMethod<[address_: AddressLike], [string], "nonpayable">;

	getText: TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike], [string], "view">;

	getTypedText: TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, type_: BytesLike], [string], "view">;

	setAddress: TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike], [void], "payable">;

	setMultiCoinAddress: TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, coin: BigNumberish, address_: BytesLike], [void], "payable">;

	setNFT: TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, chainId: BigNumberish, contract_: AddressLike, tokenId: BigNumberish], [void], "payable">;

	setReverseAddress: TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike], [void], "payable">;

	setText: TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, text: string], [void], "payable">;

	setTypedText: TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, type_: BytesLike, text: string], [void], "payable">;

	unsetAddress: TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike], [void], "payable">;

	unsetMultiCoinAddress: TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, coin: BigNumberish], [void], "payable">;

	unsetNFT: TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, chainId: BigNumberish], [void], "payable">;

	unsetReverseAddress: TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike], [void], "payable">;

	unsetText: TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike], [void], "payable">;

	unsetTypedText: TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, type_: BytesLike], [void], "payable">;

	getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

	getFunction(nameOrSignature: "getAddress"): TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike], [string], "nonpayable">;
	getFunction(nameOrSignature: "getMultiCoinAddress"): TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, coin: BigNumberish], [string], "view">;
	getFunction(nameOrSignature: "getNFT"): TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, chainId: BigNumberish], [INFTResolver.NFTStructOutput], "view">;
	getFunction(nameOrSignature: "getReverseAddress"): TypedContractMethod<[address_: AddressLike], [string], "nonpayable">;
	getFunction(nameOrSignature: "getText"): TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike], [string], "view">;
	getFunction(nameOrSignature: "getTypedText"): TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, type_: BytesLike], [string], "view">;
	getFunction(nameOrSignature: "setAddress"): TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike], [void], "payable">;
	getFunction(
		nameOrSignature: "setMultiCoinAddress"
	): TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, coin: BigNumberish, address_: BytesLike], [void], "payable">;
	getFunction(
		nameOrSignature: "setNFT"
	): TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, chainId: BigNumberish, contract_: AddressLike, tokenId: BigNumberish], [void], "payable">;
	getFunction(nameOrSignature: "setReverseAddress"): TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike], [void], "payable">;
	getFunction(nameOrSignature: "setText"): TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, text: string], [void], "payable">;
	getFunction(nameOrSignature: "setTypedText"): TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, type_: BytesLike, text: string], [void], "payable">;
	getFunction(nameOrSignature: "unsetAddress"): TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike], [void], "payable">;
	getFunction(nameOrSignature: "unsetMultiCoinAddress"): TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, coin: BigNumberish], [void], "payable">;
	getFunction(nameOrSignature: "unsetNFT"): TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, chainId: BigNumberish], [void], "payable">;
	getFunction(nameOrSignature: "unsetReverseAddress"): TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike], [void], "payable">;
	getFunction(nameOrSignature: "unsetText"): TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike], [void], "payable">;
	getFunction(nameOrSignature: "unsetTypedText"): TypedContractMethod<[host: BytesLike, name: BytesLike, tld: BytesLike, type_: BytesLike], [void], "payable">;

	getEvent(key: "SetAddress"): TypedContractEvent<SetAddressEvent.InputTuple, SetAddressEvent.OutputTuple, SetAddressEvent.OutputObject>;
	getEvent(key: "SetMultiCoinAddress"): TypedContractEvent<SetMultiCoinAddressEvent.InputTuple, SetMultiCoinAddressEvent.OutputTuple, SetMultiCoinAddressEvent.OutputObject>;
	getEvent(key: "SetNFT"): TypedContractEvent<SetNFTEvent.InputTuple, SetNFTEvent.OutputTuple, SetNFTEvent.OutputObject>;
	getEvent(key: "SetReverseAddress"): TypedContractEvent<SetReverseAddressEvent.InputTuple, SetReverseAddressEvent.OutputTuple, SetReverseAddressEvent.OutputObject>;
	getEvent(key: "SetText"): TypedContractEvent<SetTextEvent.InputTuple, SetTextEvent.OutputTuple, SetTextEvent.OutputObject>;
	getEvent(key: "SetTypedText"): TypedContractEvent<SetTypedTextEvent.InputTuple, SetTypedTextEvent.OutputTuple, SetTypedTextEvent.OutputObject>;
	getEvent(key: "UnsetAddress"): TypedContractEvent<UnsetAddressEvent.InputTuple, UnsetAddressEvent.OutputTuple, UnsetAddressEvent.OutputObject>;
	getEvent(
		key: "UnsetMultiCoinAddress"
	): TypedContractEvent<UnsetMultiCoinAddressEvent.InputTuple, UnsetMultiCoinAddressEvent.OutputTuple, UnsetMultiCoinAddressEvent.OutputObject>;
	getEvent(key: "UnsetNFT"): TypedContractEvent<UnsetNFTEvent.InputTuple, UnsetNFTEvent.OutputTuple, UnsetNFTEvent.OutputObject>;
	getEvent(key: "UnsetReverseAddress"): TypedContractEvent<UnsetReverseAddressEvent.InputTuple, UnsetReverseAddressEvent.OutputTuple, UnsetReverseAddressEvent.OutputObject>;
	getEvent(key: "UnsetText"): TypedContractEvent<UnsetTextEvent.InputTuple, UnsetTextEvent.OutputTuple, UnsetTextEvent.OutputObject>;
	getEvent(key: "UnsetTypedText"): TypedContractEvent<UnsetTypedTextEvent.InputTuple, UnsetTypedTextEvent.OutputTuple, UnsetTypedTextEvent.OutputObject>;

	filters: {
		"SetAddress(bytes,bytes,bytes,address)": TypedContractEvent<SetAddressEvent.InputTuple, SetAddressEvent.OutputTuple, SetAddressEvent.OutputObject>;
		SetAddress: TypedContractEvent<SetAddressEvent.InputTuple, SetAddressEvent.OutputTuple, SetAddressEvent.OutputObject>;

		"SetMultiCoinAddress(bytes,bytes,bytes,uint256,bytes)": TypedContractEvent<
			SetMultiCoinAddressEvent.InputTuple,
			SetMultiCoinAddressEvent.OutputTuple,
			SetMultiCoinAddressEvent.OutputObject
		>;
		SetMultiCoinAddress: TypedContractEvent<SetMultiCoinAddressEvent.InputTuple, SetMultiCoinAddressEvent.OutputTuple, SetMultiCoinAddressEvent.OutputObject>;

		"SetNFT(bytes,bytes,bytes,uint256,address,uint256)": TypedContractEvent<SetNFTEvent.InputTuple, SetNFTEvent.OutputTuple, SetNFTEvent.OutputObject>;
		SetNFT: TypedContractEvent<SetNFTEvent.InputTuple, SetNFTEvent.OutputTuple, SetNFTEvent.OutputObject>;

		"SetReverseAddress(bytes,bytes,bytes,address)": TypedContractEvent<SetReverseAddressEvent.InputTuple, SetReverseAddressEvent.OutputTuple, SetReverseAddressEvent.OutputObject>;
		SetReverseAddress: TypedContractEvent<SetReverseAddressEvent.InputTuple, SetReverseAddressEvent.OutputTuple, SetReverseAddressEvent.OutputObject>;

		"SetText(bytes,bytes,bytes,string)": TypedContractEvent<SetTextEvent.InputTuple, SetTextEvent.OutputTuple, SetTextEvent.OutputObject>;
		SetText: TypedContractEvent<SetTextEvent.InputTuple, SetTextEvent.OutputTuple, SetTextEvent.OutputObject>;

		"SetTypedText(bytes,bytes,bytes,bytes,string)": TypedContractEvent<SetTypedTextEvent.InputTuple, SetTypedTextEvent.OutputTuple, SetTypedTextEvent.OutputObject>;
		SetTypedText: TypedContractEvent<SetTypedTextEvent.InputTuple, SetTypedTextEvent.OutputTuple, SetTypedTextEvent.OutputObject>;

		"UnsetAddress(bytes,bytes,bytes)": TypedContractEvent<UnsetAddressEvent.InputTuple, UnsetAddressEvent.OutputTuple, UnsetAddressEvent.OutputObject>;
		UnsetAddress: TypedContractEvent<UnsetAddressEvent.InputTuple, UnsetAddressEvent.OutputTuple, UnsetAddressEvent.OutputObject>;

		"UnsetMultiCoinAddress(bytes,bytes,bytes,uint256)": TypedContractEvent<
			UnsetMultiCoinAddressEvent.InputTuple,
			UnsetMultiCoinAddressEvent.OutputTuple,
			UnsetMultiCoinAddressEvent.OutputObject
		>;
		UnsetMultiCoinAddress: TypedContractEvent<UnsetMultiCoinAddressEvent.InputTuple, UnsetMultiCoinAddressEvent.OutputTuple, UnsetMultiCoinAddressEvent.OutputObject>;

		"UnsetNFT(bytes,bytes,bytes,uint256)": TypedContractEvent<UnsetNFTEvent.InputTuple, UnsetNFTEvent.OutputTuple, UnsetNFTEvent.OutputObject>;
		UnsetNFT: TypedContractEvent<UnsetNFTEvent.InputTuple, UnsetNFTEvent.OutputTuple, UnsetNFTEvent.OutputObject>;

		"UnsetReverseAddress(address)": TypedContractEvent<UnsetReverseAddressEvent.InputTuple, UnsetReverseAddressEvent.OutputTuple, UnsetReverseAddressEvent.OutputObject>;
		UnsetReverseAddress: TypedContractEvent<UnsetReverseAddressEvent.InputTuple, UnsetReverseAddressEvent.OutputTuple, UnsetReverseAddressEvent.OutputObject>;

		"UnsetText(bytes,bytes,bytes)": TypedContractEvent<UnsetTextEvent.InputTuple, UnsetTextEvent.OutputTuple, UnsetTextEvent.OutputObject>;
		UnsetText: TypedContractEvent<UnsetTextEvent.InputTuple, UnsetTextEvent.OutputTuple, UnsetTextEvent.OutputObject>;

		"UnsetTypedText(bytes,bytes,bytes,bytes)": TypedContractEvent<UnsetTypedTextEvent.InputTuple, UnsetTypedTextEvent.OutputTuple, UnsetTypedTextEvent.OutputObject>;
		UnsetTypedText: TypedContractEvent<UnsetTypedTextEvent.InputTuple, UnsetTypedTextEvent.OutputTuple, UnsetTypedTextEvent.OutputObject>;
	};
}
