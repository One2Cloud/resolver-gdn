/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface ITextResolverInterface extends Interface {
  getFunction(
    nameOrSignature: "getText" | "setText" | "unsetText"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SetText" | "UnsetText"): EventFragment;

  encodeFunctionData(
    functionFragment: "getText",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setText",
    values: [BytesLike, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetText",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "getText", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setText", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unsetText", data: BytesLike): Result;
}

export namespace SetTextEvent {
  export type InputTuple = [
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    text: string
  ];
  export type OutputTuple = [
    host: string,
    name: string,
    tld: string,
    text: string
  ];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
    text: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsetTextEvent {
  export type InputTuple = [host: BytesLike, name: BytesLike, tld: BytesLike];
  export type OutputTuple = [host: string, name: string, tld: string];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ITextResolver extends BaseContract {
  connect(runner?: ContractRunner | null): ITextResolver;
  waitForDeployment(): Promise<this>;

  interface: ITextResolverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getText: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [string],
    "view"
  >;

  setText: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, text: string],
    [void],
    "payable"
  >;

  unsetText: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getText"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "setText"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, text: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unsetText"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "SetText"
  ): TypedContractEvent<
    SetTextEvent.InputTuple,
    SetTextEvent.OutputTuple,
    SetTextEvent.OutputObject
  >;
  getEvent(
    key: "UnsetText"
  ): TypedContractEvent<
    UnsetTextEvent.InputTuple,
    UnsetTextEvent.OutputTuple,
    UnsetTextEvent.OutputObject
  >;

  filters: {
    "SetText(bytes,bytes,bytes,string)": TypedContractEvent<
      SetTextEvent.InputTuple,
      SetTextEvent.OutputTuple,
      SetTextEvent.OutputObject
    >;
    SetText: TypedContractEvent<
      SetTextEvent.InputTuple,
      SetTextEvent.OutputTuple,
      SetTextEvent.OutputObject
    >;

    "UnsetText(bytes,bytes,bytes)": TypedContractEvent<
      UnsetTextEvent.InputTuple,
      UnsetTextEvent.OutputTuple,
      UnsetTextEvent.OutputObject
    >;
    UnsetText: TypedContractEvent<
      UnsetTextEvent.InputTuple,
      UnsetTextEvent.OutputTuple,
      UnsetTextEvent.OutputObject
    >;
  };
}
