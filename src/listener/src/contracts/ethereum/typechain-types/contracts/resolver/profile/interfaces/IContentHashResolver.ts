/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IContentHashResolverInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getContentHash"
      | "getTypedContentHash"
      | "setContentHash"
      | "setTypedContentHash"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "SetContentHash"): EventFragment;

  encodeFunctionData(
    functionFragment: "getContentHash",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTypedContentHash",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setContentHash",
    values: [string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTypedContentHash",
    values: [string, string, string, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getContentHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTypedContentHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContentHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTypedContentHash",
    data: BytesLike
  ): Result;
}

export namespace SetContentHashEvent {
  export type InputTuple = [node: BytesLike, hash: BytesLike];
  export type OutputTuple = [node: string, hash: string];
  export interface OutputObject {
    node: string;
    hash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IContentHashResolver extends BaseContract {
  connect(runner?: ContractRunner | null): IContentHashResolver;
  waitForDeployment(): Promise<this>;

  interface: IContentHashResolverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getContentHash: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [string],
    "view"
  >;

  getTypedContentHash: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, type_: BigNumberish],
    [string],
    "view"
  >;

  setContentHash: TypedContractMethod<
    [host: string, name: string, tld: string, hash: BytesLike],
    [void],
    "payable"
  >;

  setTypedContentHash: TypedContractMethod<
    [
      host: string,
      name: string,
      tld: string,
      type_: BigNumberish,
      hash: BytesLike
    ],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getContentHash"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTypedContentHash"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, type_: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "setContentHash"
  ): TypedContractMethod<
    [host: string, name: string, tld: string, hash: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setTypedContentHash"
  ): TypedContractMethod<
    [
      host: string,
      name: string,
      tld: string,
      type_: BigNumberish,
      hash: BytesLike
    ],
    [void],
    "payable"
  >;

  getEvent(
    key: "SetContentHash"
  ): TypedContractEvent<
    SetContentHashEvent.InputTuple,
    SetContentHashEvent.OutputTuple,
    SetContentHashEvent.OutputObject
  >;

  filters: {
    "SetContentHash(bytes32,bytes)": TypedContractEvent<
      SetContentHashEvent.InputTuple,
      SetContentHashEvent.OutputTuple,
      SetContentHashEvent.OutputObject
    >;
    SetContentHash: TypedContractEvent<
      SetContentHashEvent.InputTuple,
      SetContentHashEvent.OutputTuple,
      SetContentHashEvent.OutputObject
    >;
  };
}
