/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace INFTResolver {
  export type NFTStruct = { contract_: AddressLike; tokenId: BigNumberish };

  export type NFTStructOutput = [contract_: string, tokenId: bigint] & {
    contract_: string;
    tokenId: bigint;
  };
}

export interface PublicResolverInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_LABEL_LENGTH"
      | "MIN_LABEL_LENGTH"
      | "getAddress"
      | "getMultiCoinAddress"
      | "getNFT"
      | "getReverseAddress"
      | "getRoleAdmin"
      | "getSynchronizer"
      | "getText"
      | "getTypedText"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "proxiableUUID"
      | "receiveSync"
      | "renounceRole"
      | "revokeRole"
      | "setAddress"
      | "setMultiCoinAddress"
      | "setNFT"
      | "setReverseAddress"
      | "setSynchronizer"
      | "setText"
      | "setTypedText"
      | "supportsInterface"
      | "unsetAddress"
      | "unsetMultiCoinAddress"
      | "unsetNFT"
      | "unsetReverseAddress"
      | "unsetText"
      | "unsetTypedText"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "valid"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "ExecuteSync"
      | "Initialized"
      | "RequestSync"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetAddress"
      | "SetMultiCoinAddress"
      | "SetNFT"
      | "SetReverseAddress"
      | "SetText"
      | "SetTypedText"
      | "SyncError"
      | "UnsetAddress"
      | "UnsetMultiCoinAddress"
      | "UnsetNFT"
      | "UnsetReverseAddress"
      | "UnsetText"
      | "UnsetTypedText"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_LABEL_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_LABEL_LENGTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiCoinAddress",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFT",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReverseAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSynchronizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getText",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTypedText",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveSync",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [BytesLike, BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiCoinAddress",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFT",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setReverseAddress",
    values: [BytesLike, BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSynchronizer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setText",
    values: [BytesLike, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTypedText",
    values: [BytesLike, BytesLike, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetAddress",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetMultiCoinAddress",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetNFT",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetReverseAddress",
    values: [BytesLike, BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetText",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetTypedText",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "valid", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_LABEL_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_LABEL_LENGTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMultiCoinAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReverseAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSynchronizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getText", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTypedText",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveSync",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMultiCoinAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReverseAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSynchronizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setText", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTypedText",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsetMultiCoinAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unsetNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unsetReverseAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unsetText", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unsetTypedText",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "valid", data: BytesLike): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteSyncEvent {
  export type InputTuple = [success: boolean, ews: BytesLike];
  export type OutputTuple = [success: boolean, ews: string];
  export interface OutputObject {
    success: boolean;
    ews: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSyncEvent {
  export type InputTuple = [ews: BytesLike];
  export type OutputTuple = [ews: string];
  export interface OutputObject {
    ews: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAddressEvent {
  export type InputTuple = [
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    address_: AddressLike
  ];
  export type OutputTuple = [
    host: string,
    name: string,
    tld: string,
    address_: string
  ];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
    address_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMultiCoinAddressEvent {
  export type InputTuple = [
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    coin: BigNumberish,
    address_: BytesLike
  ];
  export type OutputTuple = [
    host: string,
    name: string,
    tld: string,
    coin: bigint,
    address_: string
  ];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
    coin: bigint;
    address_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetNFTEvent {
  export type InputTuple = [
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    chainId: BigNumberish,
    contractAddress: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    host: string,
    name: string,
    tld: string,
    chainId: bigint,
    contractAddress: string,
    tokenId: bigint
  ];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
    chainId: bigint;
    contractAddress: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetReverseAddressEvent {
  export type InputTuple = [
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    address_: AddressLike
  ];
  export type OutputTuple = [
    host: string,
    name: string,
    tld: string,
    address_: string
  ];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
    address_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTextEvent {
  export type InputTuple = [
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    text: string
  ];
  export type OutputTuple = [
    host: string,
    name: string,
    tld: string,
    text: string
  ];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
    text: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTypedTextEvent {
  export type InputTuple = [
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    type_: BytesLike,
    text: string
  ];
  export type OutputTuple = [
    host: string,
    name: string,
    tld: string,
    type_: string,
    text: string
  ];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
    type_: string;
    text: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SyncErrorEvent {
  export type InputTuple = [ews: BytesLike, reason: BytesLike];
  export type OutputTuple = [ews: string, reason: string];
  export interface OutputObject {
    ews: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsetAddressEvent {
  export type InputTuple = [host: BytesLike, name: BytesLike, tld: BytesLike];
  export type OutputTuple = [host: string, name: string, tld: string];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsetMultiCoinAddressEvent {
  export type InputTuple = [
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    coin: BigNumberish
  ];
  export type OutputTuple = [
    host: string,
    name: string,
    tld: string,
    coin: bigint
  ];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
    coin: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsetNFTEvent {
  export type InputTuple = [
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    chainId: BigNumberish
  ];
  export type OutputTuple = [
    host: string,
    name: string,
    tld: string,
    chainId: bigint
  ];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
    chainId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsetReverseAddressEvent {
  export type InputTuple = [address_: AddressLike];
  export type OutputTuple = [address_: string];
  export interface OutputObject {
    address_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsetTextEvent {
  export type InputTuple = [host: BytesLike, name: BytesLike, tld: BytesLike];
  export type OutputTuple = [host: string, name: string, tld: string];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsetTypedTextEvent {
  export type InputTuple = [
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    type_: BytesLike
  ];
  export type OutputTuple = [
    host: string,
    name: string,
    tld: string,
    type_: string
  ];
  export interface OutputObject {
    host: string;
    name: string;
    tld: string;
    type_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PublicResolver extends BaseContract {
  connect(runner?: ContractRunner | null): PublicResolver;
  waitForDeployment(): Promise<this>;

  interface: PublicResolverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_LABEL_LENGTH: TypedContractMethod<[], [bigint], "view">;

  MIN_LABEL_LENGTH: TypedContractMethod<[], [bigint], "view">;

  getAddress: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [string],
    "view"
  >;

  getMultiCoinAddress: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, coin: BigNumberish],
    [string],
    "view"
  >;

  getNFT: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, chainId: BigNumberish],
    [INFTResolver.NFTStructOutput],
    "view"
  >;

  getReverseAddress: TypedContractMethod<
    [address_: AddressLike],
    [string],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getSynchronizer: TypedContractMethod<[], [string], "view">;

  getText: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [string],
    "view"
  >;

  getTypedText: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, type_: BytesLike],
    [string],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [registry_: AddressLike],
    [void],
    "nonpayable"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  receiveSync: TypedContractMethod<[ews: BytesLike], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setAddress: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike],
    [void],
    "payable"
  >;

  setMultiCoinAddress: TypedContractMethod<
    [
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      coin: BigNumberish,
      address_: BytesLike
    ],
    [void],
    "payable"
  >;

  setNFT: TypedContractMethod<
    [
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      chainId: BigNumberish,
      contract_: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "payable"
  >;

  setReverseAddress: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike],
    [void],
    "payable"
  >;

  setSynchronizer: TypedContractMethod<
    [synchronizer_: AddressLike],
    [void],
    "nonpayable"
  >;

  setText: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, text: string],
    [void],
    "payable"
  >;

  setTypedText: TypedContractMethod<
    [
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      type_: BytesLike,
      text: string
    ],
    [void],
    "payable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceID: BytesLike],
    [boolean],
    "view"
  >;

  unsetAddress: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [void],
    "payable"
  >;

  unsetMultiCoinAddress: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, coin: BigNumberish],
    [void],
    "payable"
  >;

  unsetNFT: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, chainId: BigNumberish],
    [void],
    "payable"
  >;

  unsetReverseAddress: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike],
    [void],
    "payable"
  >;

  unsetText: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [void],
    "payable"
  >;

  unsetTypedText: TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, type_: BytesLike],
    [void],
    "payable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  valid: TypedContractMethod<[label: BytesLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_LABEL_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_LABEL_LENGTH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAddress"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMultiCoinAddress"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, coin: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNFT"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, chainId: BigNumberish],
    [INFTResolver.NFTStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReverseAddress"
  ): TypedContractMethod<[address_: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSynchronizer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getText"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTypedText"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, type_: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[registry_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveSync"
  ): TypedContractMethod<[ews: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAddress"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setMultiCoinAddress"
  ): TypedContractMethod<
    [
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      coin: BigNumberish,
      address_: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setNFT"
  ): TypedContractMethod<
    [
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      chainId: BigNumberish,
      contract_: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setReverseAddress"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setSynchronizer"
  ): TypedContractMethod<[synchronizer_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setText"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, text: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setTypedText"
  ): TypedContractMethod<
    [
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      type_: BytesLike,
      text: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceID: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unsetAddress"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unsetMultiCoinAddress"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, coin: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unsetNFT"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, chainId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unsetReverseAddress"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, address_: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unsetText"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unsetTypedText"
  ): TypedContractMethod<
    [host: BytesLike, name: BytesLike, tld: BytesLike, type_: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "valid"
  ): TypedContractMethod<[label: BytesLike], [boolean], "view">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteSync"
  ): TypedContractEvent<
    ExecuteSyncEvent.InputTuple,
    ExecuteSyncEvent.OutputTuple,
    ExecuteSyncEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RequestSync"
  ): TypedContractEvent<
    RequestSyncEvent.InputTuple,
    RequestSyncEvent.OutputTuple,
    RequestSyncEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetAddress"
  ): TypedContractEvent<
    SetAddressEvent.InputTuple,
    SetAddressEvent.OutputTuple,
    SetAddressEvent.OutputObject
  >;
  getEvent(
    key: "SetMultiCoinAddress"
  ): TypedContractEvent<
    SetMultiCoinAddressEvent.InputTuple,
    SetMultiCoinAddressEvent.OutputTuple,
    SetMultiCoinAddressEvent.OutputObject
  >;
  getEvent(
    key: "SetNFT"
  ): TypedContractEvent<
    SetNFTEvent.InputTuple,
    SetNFTEvent.OutputTuple,
    SetNFTEvent.OutputObject
  >;
  getEvent(
    key: "SetReverseAddress"
  ): TypedContractEvent<
    SetReverseAddressEvent.InputTuple,
    SetReverseAddressEvent.OutputTuple,
    SetReverseAddressEvent.OutputObject
  >;
  getEvent(
    key: "SetText"
  ): TypedContractEvent<
    SetTextEvent.InputTuple,
    SetTextEvent.OutputTuple,
    SetTextEvent.OutputObject
  >;
  getEvent(
    key: "SetTypedText"
  ): TypedContractEvent<
    SetTypedTextEvent.InputTuple,
    SetTypedTextEvent.OutputTuple,
    SetTypedTextEvent.OutputObject
  >;
  getEvent(
    key: "SyncError"
  ): TypedContractEvent<
    SyncErrorEvent.InputTuple,
    SyncErrorEvent.OutputTuple,
    SyncErrorEvent.OutputObject
  >;
  getEvent(
    key: "UnsetAddress"
  ): TypedContractEvent<
    UnsetAddressEvent.InputTuple,
    UnsetAddressEvent.OutputTuple,
    UnsetAddressEvent.OutputObject
  >;
  getEvent(
    key: "UnsetMultiCoinAddress"
  ): TypedContractEvent<
    UnsetMultiCoinAddressEvent.InputTuple,
    UnsetMultiCoinAddressEvent.OutputTuple,
    UnsetMultiCoinAddressEvent.OutputObject
  >;
  getEvent(
    key: "UnsetNFT"
  ): TypedContractEvent<
    UnsetNFTEvent.InputTuple,
    UnsetNFTEvent.OutputTuple,
    UnsetNFTEvent.OutputObject
  >;
  getEvent(
    key: "UnsetReverseAddress"
  ): TypedContractEvent<
    UnsetReverseAddressEvent.InputTuple,
    UnsetReverseAddressEvent.OutputTuple,
    UnsetReverseAddressEvent.OutputObject
  >;
  getEvent(
    key: "UnsetText"
  ): TypedContractEvent<
    UnsetTextEvent.InputTuple,
    UnsetTextEvent.OutputTuple,
    UnsetTextEvent.OutputObject
  >;
  getEvent(
    key: "UnsetTypedText"
  ): TypedContractEvent<
    UnsetTypedTextEvent.InputTuple,
    UnsetTypedTextEvent.OutputTuple,
    UnsetTypedTextEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "ExecuteSync(bool,bytes)": TypedContractEvent<
      ExecuteSyncEvent.InputTuple,
      ExecuteSyncEvent.OutputTuple,
      ExecuteSyncEvent.OutputObject
    >;
    ExecuteSync: TypedContractEvent<
      ExecuteSyncEvent.InputTuple,
      ExecuteSyncEvent.OutputTuple,
      ExecuteSyncEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RequestSync(bytes)": TypedContractEvent<
      RequestSyncEvent.InputTuple,
      RequestSyncEvent.OutputTuple,
      RequestSyncEvent.OutputObject
    >;
    RequestSync: TypedContractEvent<
      RequestSyncEvent.InputTuple,
      RequestSyncEvent.OutputTuple,
      RequestSyncEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetAddress(bytes,bytes,bytes,address)": TypedContractEvent<
      SetAddressEvent.InputTuple,
      SetAddressEvent.OutputTuple,
      SetAddressEvent.OutputObject
    >;
    SetAddress: TypedContractEvent<
      SetAddressEvent.InputTuple,
      SetAddressEvent.OutputTuple,
      SetAddressEvent.OutputObject
    >;

    "SetMultiCoinAddress(bytes,bytes,bytes,uint256,bytes)": TypedContractEvent<
      SetMultiCoinAddressEvent.InputTuple,
      SetMultiCoinAddressEvent.OutputTuple,
      SetMultiCoinAddressEvent.OutputObject
    >;
    SetMultiCoinAddress: TypedContractEvent<
      SetMultiCoinAddressEvent.InputTuple,
      SetMultiCoinAddressEvent.OutputTuple,
      SetMultiCoinAddressEvent.OutputObject
    >;

    "SetNFT(bytes,bytes,bytes,uint256,address,uint256)": TypedContractEvent<
      SetNFTEvent.InputTuple,
      SetNFTEvent.OutputTuple,
      SetNFTEvent.OutputObject
    >;
    SetNFT: TypedContractEvent<
      SetNFTEvent.InputTuple,
      SetNFTEvent.OutputTuple,
      SetNFTEvent.OutputObject
    >;

    "SetReverseAddress(bytes,bytes,bytes,address)": TypedContractEvent<
      SetReverseAddressEvent.InputTuple,
      SetReverseAddressEvent.OutputTuple,
      SetReverseAddressEvent.OutputObject
    >;
    SetReverseAddress: TypedContractEvent<
      SetReverseAddressEvent.InputTuple,
      SetReverseAddressEvent.OutputTuple,
      SetReverseAddressEvent.OutputObject
    >;

    "SetText(bytes,bytes,bytes,string)": TypedContractEvent<
      SetTextEvent.InputTuple,
      SetTextEvent.OutputTuple,
      SetTextEvent.OutputObject
    >;
    SetText: TypedContractEvent<
      SetTextEvent.InputTuple,
      SetTextEvent.OutputTuple,
      SetTextEvent.OutputObject
    >;

    "SetTypedText(bytes,bytes,bytes,bytes,string)": TypedContractEvent<
      SetTypedTextEvent.InputTuple,
      SetTypedTextEvent.OutputTuple,
      SetTypedTextEvent.OutputObject
    >;
    SetTypedText: TypedContractEvent<
      SetTypedTextEvent.InputTuple,
      SetTypedTextEvent.OutputTuple,
      SetTypedTextEvent.OutputObject
    >;

    "SyncError(bytes,bytes)": TypedContractEvent<
      SyncErrorEvent.InputTuple,
      SyncErrorEvent.OutputTuple,
      SyncErrorEvent.OutputObject
    >;
    SyncError: TypedContractEvent<
      SyncErrorEvent.InputTuple,
      SyncErrorEvent.OutputTuple,
      SyncErrorEvent.OutputObject
    >;

    "UnsetAddress(bytes,bytes,bytes)": TypedContractEvent<
      UnsetAddressEvent.InputTuple,
      UnsetAddressEvent.OutputTuple,
      UnsetAddressEvent.OutputObject
    >;
    UnsetAddress: TypedContractEvent<
      UnsetAddressEvent.InputTuple,
      UnsetAddressEvent.OutputTuple,
      UnsetAddressEvent.OutputObject
    >;

    "UnsetMultiCoinAddress(bytes,bytes,bytes,uint256)": TypedContractEvent<
      UnsetMultiCoinAddressEvent.InputTuple,
      UnsetMultiCoinAddressEvent.OutputTuple,
      UnsetMultiCoinAddressEvent.OutputObject
    >;
    UnsetMultiCoinAddress: TypedContractEvent<
      UnsetMultiCoinAddressEvent.InputTuple,
      UnsetMultiCoinAddressEvent.OutputTuple,
      UnsetMultiCoinAddressEvent.OutputObject
    >;

    "UnsetNFT(bytes,bytes,bytes,uint256)": TypedContractEvent<
      UnsetNFTEvent.InputTuple,
      UnsetNFTEvent.OutputTuple,
      UnsetNFTEvent.OutputObject
    >;
    UnsetNFT: TypedContractEvent<
      UnsetNFTEvent.InputTuple,
      UnsetNFTEvent.OutputTuple,
      UnsetNFTEvent.OutputObject
    >;

    "UnsetReverseAddress(address)": TypedContractEvent<
      UnsetReverseAddressEvent.InputTuple,
      UnsetReverseAddressEvent.OutputTuple,
      UnsetReverseAddressEvent.OutputObject
    >;
    UnsetReverseAddress: TypedContractEvent<
      UnsetReverseAddressEvent.InputTuple,
      UnsetReverseAddressEvent.OutputTuple,
      UnsetReverseAddressEvent.OutputObject
    >;

    "UnsetText(bytes,bytes,bytes)": TypedContractEvent<
      UnsetTextEvent.InputTuple,
      UnsetTextEvent.OutputTuple,
      UnsetTextEvent.OutputObject
    >;
    UnsetText: TypedContractEvent<
      UnsetTextEvent.InputTuple,
      UnsetTextEvent.OutputTuple,
      UnsetTextEvent.OutputObject
    >;

    "UnsetTypedText(bytes,bytes,bytes,bytes)": TypedContractEvent<
      UnsetTypedTextEvent.InputTuple,
      UnsetTypedTextEvent.OutputTuple,
      UnsetTypedTextEvent.OutputObject
    >;
    UnsetTypedText: TypedContractEvent<
      UnsetTypedTextEvent.InputTuple,
      UnsetTypedTextEvent.OutputTuple,
      UnsetTypedTextEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
