/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IPortalInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "estimateFee"
      | "getProvider"
      | "receive_"
      | "send_"
      | "setProvider"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PacketReceived"
      | "PacketSent"
      | "ProviderError"
      | "ReceiverError"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "estimateFee",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProvider",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receive_",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "send_",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProvider",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "estimateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "receive_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProvider",
    data: BytesLike
  ): Result;
}

export namespace PacketReceivedEvent {
  export type InputTuple = [provider: BigNumberish];
  export type OutputTuple = [provider: bigint];
  export interface OutputObject {
    provider: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PacketSentEvent {
  export type InputTuple = [
    sender: AddressLike,
    dstChain: BigNumberish,
    provider: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    dstChain: bigint,
    provider: bigint
  ];
  export interface OutputObject {
    sender: string;
    dstChain: bigint;
    provider: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProviderErrorEvent {
  export type InputTuple = [provider: BigNumberish, reason: string];
  export type OutputTuple = [provider: bigint, reason: string];
  export interface OutputObject {
    provider: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceiverErrorEvent {
  export type InputTuple = [
    id: BytesLike,
    receiver: AddressLike,
    resaon: string
  ];
  export type OutputTuple = [id: string, receiver: string, resaon: string];
  export interface OutputObject {
    id: string;
    receiver: string;
    resaon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPortal extends BaseContract {
  connect(runner?: ContractRunner | null): IPortal;
  waitForDeployment(): Promise<this>;

  interface: IPortalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  estimateFee: TypedContractMethod<
    [dstChain: BigNumberish, provider: BigNumberish, payload: BytesLike],
    [bigint],
    "view"
  >;

  getProvider: TypedContractMethod<[provider: BigNumberish], [string], "view">;

  receive_: TypedContractMethod<
    [provider: BigNumberish, payload: BytesLike],
    [void],
    "nonpayable"
  >;

  send_: TypedContractMethod<
    [
      sender: AddressLike,
      dstChain: BigNumberish,
      provider: BigNumberish,
      payload: BytesLike
    ],
    [void],
    "payable"
  >;

  setProvider: TypedContractMethod<
    [arg0: BigNumberish, address_: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "estimateFee"
  ): TypedContractMethod<
    [dstChain: BigNumberish, provider: BigNumberish, payload: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProvider"
  ): TypedContractMethod<[provider: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "receive_"
  ): TypedContractMethod<
    [provider: BigNumberish, payload: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "send_"
  ): TypedContractMethod<
    [
      sender: AddressLike,
      dstChain: BigNumberish,
      provider: BigNumberish,
      payload: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setProvider"
  ): TypedContractMethod<
    [arg0: BigNumberish, address_: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "PacketReceived"
  ): TypedContractEvent<
    PacketReceivedEvent.InputTuple,
    PacketReceivedEvent.OutputTuple,
    PacketReceivedEvent.OutputObject
  >;
  getEvent(
    key: "PacketSent"
  ): TypedContractEvent<
    PacketSentEvent.InputTuple,
    PacketSentEvent.OutputTuple,
    PacketSentEvent.OutputObject
  >;
  getEvent(
    key: "ProviderError"
  ): TypedContractEvent<
    ProviderErrorEvent.InputTuple,
    ProviderErrorEvent.OutputTuple,
    ProviderErrorEvent.OutputObject
  >;
  getEvent(
    key: "ReceiverError"
  ): TypedContractEvent<
    ReceiverErrorEvent.InputTuple,
    ReceiverErrorEvent.OutputTuple,
    ReceiverErrorEvent.OutputObject
  >;

  filters: {
    "PacketReceived(uint8)": TypedContractEvent<
      PacketReceivedEvent.InputTuple,
      PacketReceivedEvent.OutputTuple,
      PacketReceivedEvent.OutputObject
    >;
    PacketReceived: TypedContractEvent<
      PacketReceivedEvent.InputTuple,
      PacketReceivedEvent.OutputTuple,
      PacketReceivedEvent.OutputObject
    >;

    "PacketSent(address,uint8,uint8)": TypedContractEvent<
      PacketSentEvent.InputTuple,
      PacketSentEvent.OutputTuple,
      PacketSentEvent.OutputObject
    >;
    PacketSent: TypedContractEvent<
      PacketSentEvent.InputTuple,
      PacketSentEvent.OutputTuple,
      PacketSentEvent.OutputObject
    >;

    "ProviderError(uint8,string)": TypedContractEvent<
      ProviderErrorEvent.InputTuple,
      ProviderErrorEvent.OutputTuple,
      ProviderErrorEvent.OutputObject
    >;
    ProviderError: TypedContractEvent<
      ProviderErrorEvent.InputTuple,
      ProviderErrorEvent.OutputTuple,
      ProviderErrorEvent.OutputObject
    >;

    "ReceiverError(bytes32,address,string)": TypedContractEvent<
      ReceiverErrorEvent.InputTuple,
      ReceiverErrorEvent.OutputTuple,
      ReceiverErrorEvent.OutputObject
    >;
    ReceiverError: TypedContractEvent<
      ReceiverErrorEvent.InputTuple,
      ReceiverErrorEvent.OutputTuple,
      ReceiverErrorEvent.OutputObject
    >;
  };
}
