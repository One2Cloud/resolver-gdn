/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface SynchronizerApplicationInterface extends Interface {
  getFunction(
    nameOrSignature: "getSynchronizer" | "receiveSync" | "setSynchronizer"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExecuteSync"
      | "Initialized"
      | "RequestSync"
      | "SyncError"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getSynchronizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveSync",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSynchronizer",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getSynchronizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveSync",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSynchronizer",
    data: BytesLike
  ): Result;
}

export namespace ExecuteSyncEvent {
  export type InputTuple = [success: boolean, ews: BytesLike];
  export type OutputTuple = [success: boolean, ews: string];
  export interface OutputObject {
    success: boolean;
    ews: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestSyncEvent {
  export type InputTuple = [ews: BytesLike];
  export type OutputTuple = [ews: string];
  export interface OutputObject {
    ews: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SyncErrorEvent {
  export type InputTuple = [ews: BytesLike, reason: BytesLike];
  export type OutputTuple = [ews: string, reason: string];
  export interface OutputObject {
    ews: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SynchronizerApplication extends BaseContract {
  connect(runner?: ContractRunner | null): SynchronizerApplication;
  waitForDeployment(): Promise<this>;

  interface: SynchronizerApplicationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getSynchronizer: TypedContractMethod<[], [string], "view">;

  receiveSync: TypedContractMethod<[ews: BytesLike], [void], "nonpayable">;

  setSynchronizer: TypedContractMethod<
    [synchronizer_: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getSynchronizer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveSync"
  ): TypedContractMethod<[ews: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSynchronizer"
  ): TypedContractMethod<[synchronizer_: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ExecuteSync"
  ): TypedContractEvent<
    ExecuteSyncEvent.InputTuple,
    ExecuteSyncEvent.OutputTuple,
    ExecuteSyncEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RequestSync"
  ): TypedContractEvent<
    RequestSyncEvent.InputTuple,
    RequestSyncEvent.OutputTuple,
    RequestSyncEvent.OutputObject
  >;
  getEvent(
    key: "SyncError"
  ): TypedContractEvent<
    SyncErrorEvent.InputTuple,
    SyncErrorEvent.OutputTuple,
    SyncErrorEvent.OutputObject
  >;

  filters: {
    "ExecuteSync(bool,bytes)": TypedContractEvent<
      ExecuteSyncEvent.InputTuple,
      ExecuteSyncEvent.OutputTuple,
      ExecuteSyncEvent.OutputObject
    >;
    ExecuteSync: TypedContractEvent<
      ExecuteSyncEvent.InputTuple,
      ExecuteSyncEvent.OutputTuple,
      ExecuteSyncEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RequestSync(bytes)": TypedContractEvent<
      RequestSyncEvent.InputTuple,
      RequestSyncEvent.OutputTuple,
      RequestSyncEvent.OutputObject
    >;
    RequestSync: TypedContractEvent<
      RequestSyncEvent.InputTuple,
      RequestSyncEvent.OutputTuple,
      RequestSyncEvent.OutputObject
    >;

    "SyncError(bytes,bytes)": TypedContractEvent<
      SyncErrorEvent.InputTuple,
      SyncErrorEvent.OutputTuple,
      SyncErrorEvent.OutputObject
    >;
    SyncError: TypedContractEvent<
      SyncErrorEvent.InputTuple,
      SyncErrorEvent.OutputTuple,
      SyncErrorEvent.OutputObject
    >;
  };
}
