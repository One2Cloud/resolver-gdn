/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export declare namespace IHandler {
  export type RouterLinkerStruct = {
    _rSyncContract: AddressLike;
    _chainID: BigNumberish;
    _linkedContract: AddressLike;
  };

  export type RouterLinkerStructOutput = [
    _rSyncContract: string,
    _chainID: bigint,
    _linkedContract: string
  ] & { _rSyncContract: string; _chainID: bigint; _linkedContract: string };
}

export interface IHandlerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MapContract"
      | "UnMapContract"
      | "fetch_chainID"
      | "genericDeposit"
      | "replayGenericDeposit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MapContract",
    values: [IHandler.RouterLinkerStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "UnMapContract",
    values: [IHandler.RouterLinkerStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "fetch_chainID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genericDeposit",
    values: [BigNumberish, BytesLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "replayGenericDeposit",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MapContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UnMapContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetch_chainID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genericDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replayGenericDeposit",
    data: BytesLike
  ): Result;
}

export interface IHandler extends BaseContract {
  connect(runner?: ContractRunner | null): IHandler;
  waitForDeployment(): Promise<this>;

  interface: IHandlerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MapContract: TypedContractMethod<
    [linker: IHandler.RouterLinkerStruct],
    [void],
    "nonpayable"
  >;

  UnMapContract: TypedContractMethod<
    [linker: IHandler.RouterLinkerStruct],
    [void],
    "nonpayable"
  >;

  fetch_chainID: TypedContractMethod<[], [bigint], "view">;

  genericDeposit: TypedContractMethod<
    [
      _destChainID: BigNumberish,
      _data: BytesLike,
      _gasLimit: BigNumberish,
      _gasPrice: BigNumberish,
      _feeToken: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  replayGenericDeposit: TypedContractMethod<
    [
      _destChainID: BigNumberish,
      _depositNonce: BigNumberish,
      _gasLimit: BigNumberish,
      _gasPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MapContract"
  ): TypedContractMethod<
    [linker: IHandler.RouterLinkerStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "UnMapContract"
  ): TypedContractMethod<
    [linker: IHandler.RouterLinkerStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fetch_chainID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "genericDeposit"
  ): TypedContractMethod<
    [
      _destChainID: BigNumberish,
      _data: BytesLike,
      _gasLimit: BigNumberish,
      _gasPrice: BigNumberish,
      _feeToken: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "replayGenericDeposit"
  ): TypedContractMethod<
    [
      _destChainID: BigNumberish,
      _depositNonce: BigNumberish,
      _gasLimit: BigNumberish,
      _gasPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
