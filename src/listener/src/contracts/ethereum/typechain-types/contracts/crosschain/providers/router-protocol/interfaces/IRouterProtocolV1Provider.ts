/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface IRouterProtocolV1ProviderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getFeeToken"
      | "getHandler"
      | "receive_"
      | "routerReply"
      | "send_"
      | "setFeeToken"
      | "setHandler"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "MessageReceived" | "MessageSent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getFeeToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHandler",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "receive_", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "routerReply",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "send_",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setHandler",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHandler", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receive_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "routerReply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHandler", data: BytesLike): Result;
}

export namespace MessageReceivedEvent {
  export type InputTuple = [
    ref: BytesLike,
    sender: BytesLike,
    srcChainId: BytesLike,
    payload: BytesLike
  ];
  export type OutputTuple = [
    ref: string,
    sender: string,
    srcChainId: string,
    payload: string
  ];
  export interface OutputObject {
    ref: string;
    sender: string;
    srcChainId: string;
    payload: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageSentEvent {
  export type InputTuple = [
    sender: BytesLike,
    receiver: BytesLike,
    dstChainId: BytesLike,
    payload: BytesLike
  ];
  export type OutputTuple = [
    sender: string,
    receiver: string,
    dstChainId: string,
    payload: string
  ];
  export interface OutputObject {
    sender: string;
    receiver: string;
    dstChainId: string;
    payload: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRouterProtocolV1Provider extends BaseContract {
  connect(runner?: ContractRunner | null): IRouterProtocolV1Provider;
  waitForDeployment(): Promise<this>;

  interface: IRouterProtocolV1ProviderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFeeToken: TypedContractMethod<[user: AddressLike], [string], "view">;

  getHandler: TypedContractMethod<[], [string], "view">;

  receive_: TypedContractMethod<[_payload: BytesLike], [void], "nonpayable">;

  routerReply: TypedContractMethod<
    [srcChainID: BigNumberish, srcAddress: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  send_: TypedContractMethod<
    [_sender: AddressLike, _dstChain: BigNumberish, _payload: BytesLike],
    [void],
    "payable"
  >;

  setFeeToken: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  setHandler: TypedContractMethod<
    [_handler: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getFeeToken"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getHandler"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receive_"
  ): TypedContractMethod<[_payload: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "routerReply"
  ): TypedContractMethod<
    [srcChainID: BigNumberish, srcAddress: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "send_"
  ): TypedContractMethod<
    [_sender: AddressLike, _dstChain: BigNumberish, _payload: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setFeeToken"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHandler"
  ): TypedContractMethod<[_handler: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "MessageReceived"
  ): TypedContractEvent<
    MessageReceivedEvent.InputTuple,
    MessageReceivedEvent.OutputTuple,
    MessageReceivedEvent.OutputObject
  >;
  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;

  filters: {
    "MessageReceived(bytes32,bytes,bytes,bytes)": TypedContractEvent<
      MessageReceivedEvent.InputTuple,
      MessageReceivedEvent.OutputTuple,
      MessageReceivedEvent.OutputObject
    >;
    MessageReceived: TypedContractEvent<
      MessageReceivedEvent.InputTuple,
      MessageReceivedEvent.OutputTuple,
      MessageReceivedEvent.OutputObject
    >;

    "MessageSent(bytes,bytes,bytes,bytes)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
  };
}
