/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface ILayerZeroProviderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "estimateFee"
      | "getChainId"
      | "isTrustedRemote"
      | "lzReceive"
      | "receive_"
      | "send_"
      | "setChainId"
      | "setTrustedRemote"
      | "setV1AdaptorParameters"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MessageDeliverFailed"
      | "MessageDelivered"
      | "MessageReceived"
      | "MessageSent"
      | "SetTrustedRemote"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "estimateFee",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedRemote",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "receive_", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "send_",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedRemote",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setV1AdaptorParameters",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "estimateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receive_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setV1AdaptorParameters",
    data: BytesLike
  ): Result;
}

export namespace MessageDeliverFailedEvent {
  export type InputTuple = [ref: BytesLike, reason: string];
  export type OutputTuple = [ref: string, reason: string];
  export interface OutputObject {
    ref: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageDeliveredEvent {
  export type InputTuple = [ref: BytesLike];
  export type OutputTuple = [ref: string];
  export interface OutputObject {
    ref: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageReceivedEvent {
  export type InputTuple = [
    srcChainId: BigNumberish,
    srcAddress: BytesLike,
    ref: BytesLike,
    payload: BytesLike,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    srcChainId: bigint,
    srcAddress: string,
    ref: string,
    payload: string,
    nonce: bigint
  ];
  export interface OutputObject {
    srcChainId: bigint;
    srcAddress: string;
    ref: string;
    payload: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageSentEvent {
  export type InputTuple = [
    sender: AddressLike,
    dstChainId: BigNumberish,
    payload: BytesLike,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    dstChainId: bigint,
    payload: string,
    nonce: bigint
  ];
  export interface OutputObject {
    sender: string;
    dstChainId: bigint;
    payload: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTrustedRemoteEvent {
  export type InputTuple = [srcChainId: BigNumberish, srcAddress: BytesLike];
  export type OutputTuple = [srcChainId: bigint, srcAddress: string];
  export interface OutputObject {
    srcChainId: bigint;
    srcAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ILayerZeroProvider extends BaseContract {
  connect(runner?: ContractRunner | null): ILayerZeroProvider;
  waitForDeployment(): Promise<this>;

  interface: ILayerZeroProviderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  estimateFee: TypedContractMethod<
    [_dstChain: BigNumberish, _payload: BytesLike],
    [bigint],
    "view"
  >;

  getChainId: TypedContractMethod<
    [chain: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  isTrustedRemote: TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [boolean],
    "view"
  >;

  lzReceive: TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  receive_: TypedContractMethod<[_payload: BytesLike], [void], "nonpayable">;

  send_: TypedContractMethod<
    [_from: AddressLike, _dstChain: BigNumberish, _payload: BytesLike],
    [void],
    "payable"
  >;

  setChainId: TypedContractMethod<
    [chain: BigNumberish, chainId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTrustedRemote: TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  setV1AdaptorParameters: TypedContractMethod<
    [dstGasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "estimateFee"
  ): TypedContractMethod<
    [_dstChain: BigNumberish, _payload: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getChainId"
  ): TypedContractMethod<[chain: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "isTrustedRemote"
  ): TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lzReceive"
  ): TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _nonce: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receive_"
  ): TypedContractMethod<[_payload: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "send_"
  ): TypedContractMethod<
    [_from: AddressLike, _dstChain: BigNumberish, _payload: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setChainId"
  ): TypedContractMethod<
    [chain: BigNumberish, chainId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTrustedRemote"
  ): TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setV1AdaptorParameters"
  ): TypedContractMethod<[dstGasLimit: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "MessageDeliverFailed"
  ): TypedContractEvent<
    MessageDeliverFailedEvent.InputTuple,
    MessageDeliverFailedEvent.OutputTuple,
    MessageDeliverFailedEvent.OutputObject
  >;
  getEvent(
    key: "MessageDelivered"
  ): TypedContractEvent<
    MessageDeliveredEvent.InputTuple,
    MessageDeliveredEvent.OutputTuple,
    MessageDeliveredEvent.OutputObject
  >;
  getEvent(
    key: "MessageReceived"
  ): TypedContractEvent<
    MessageReceivedEvent.InputTuple,
    MessageReceivedEvent.OutputTuple,
    MessageReceivedEvent.OutputObject
  >;
  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;
  getEvent(
    key: "SetTrustedRemote"
  ): TypedContractEvent<
    SetTrustedRemoteEvent.InputTuple,
    SetTrustedRemoteEvent.OutputTuple,
    SetTrustedRemoteEvent.OutputObject
  >;

  filters: {
    "MessageDeliverFailed(bytes32,string)": TypedContractEvent<
      MessageDeliverFailedEvent.InputTuple,
      MessageDeliverFailedEvent.OutputTuple,
      MessageDeliverFailedEvent.OutputObject
    >;
    MessageDeliverFailed: TypedContractEvent<
      MessageDeliverFailedEvent.InputTuple,
      MessageDeliverFailedEvent.OutputTuple,
      MessageDeliverFailedEvent.OutputObject
    >;

    "MessageDelivered(bytes32)": TypedContractEvent<
      MessageDeliveredEvent.InputTuple,
      MessageDeliveredEvent.OutputTuple,
      MessageDeliveredEvent.OutputObject
    >;
    MessageDelivered: TypedContractEvent<
      MessageDeliveredEvent.InputTuple,
      MessageDeliveredEvent.OutputTuple,
      MessageDeliveredEvent.OutputObject
    >;

    "MessageReceived(uint16,bytes,bytes32,bytes,uint64)": TypedContractEvent<
      MessageReceivedEvent.InputTuple,
      MessageReceivedEvent.OutputTuple,
      MessageReceivedEvent.OutputObject
    >;
    MessageReceived: TypedContractEvent<
      MessageReceivedEvent.InputTuple,
      MessageReceivedEvent.OutputTuple,
      MessageReceivedEvent.OutputObject
    >;

    "MessageSent(address,uint16,bytes,uint64)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;

    "SetTrustedRemote(uint16,bytes)": TypedContractEvent<
      SetTrustedRemoteEvent.InputTuple,
      SetTrustedRemoteEvent.OutputTuple,
      SetTrustedRemoteEvent.OutputObject
    >;
    SetTrustedRemote: TypedContractEvent<
      SetTrustedRemoteEvent.InputTuple,
      SetTrustedRemoteEvent.OutputTuple,
      SetTrustedRemoteEvent.OutputObject
    >;
  };
}
