/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface IMultichainAnyCallV6ProviderInterface extends Interface {
  getFunction(
    nameOrSignature: "estimateFee" | "getChainId" | "send_" | "setChainId"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Received" | "Sent"): EventFragment;

  encodeFunctionData(
    functionFragment: "estimateFee",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "send_",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainId",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "estimateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "send_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setChainId", data: BytesLike): Result;
}

export namespace ReceivedEvent {
  export type InputTuple = [
    srcChainId: BigNumberish,
    srcAddress: BytesLike,
    payload: BytesLike
  ];
  export type OutputTuple = [
    srcChainId: bigint,
    srcAddress: string,
    payload: string
  ];
  export interface OutputObject {
    srcChainId: bigint;
    srcAddress: string;
    payload: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SentEvent {
  export type InputTuple = [
    sender: AddressLike,
    dstChainId: BigNumberish,
    payload: BytesLike
  ];
  export type OutputTuple = [
    sender: string,
    dstChainId: bigint,
    payload: string
  ];
  export interface OutputObject {
    sender: string;
    dstChainId: bigint;
    payload: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IMultichainAnyCallV6Provider extends BaseContract {
  connect(runner?: ContractRunner | null): IMultichainAnyCallV6Provider;
  waitForDeployment(): Promise<this>;

  interface: IMultichainAnyCallV6ProviderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  estimateFee: TypedContractMethod<
    [_dstChainId: BigNumberish, _payload: BytesLike],
    [bigint],
    "view"
  >;

  getChainId: TypedContractMethod<
    [chain: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  send_: TypedContractMethod<
    [_from: AddressLike, _dstChain: BigNumberish, _payload: BytesLike],
    [void],
    "payable"
  >;

  setChainId: TypedContractMethod<
    [chain: BigNumberish, chainId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "estimateFee"
  ): TypedContractMethod<
    [_dstChainId: BigNumberish, _payload: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getChainId"
  ): TypedContractMethod<[chain: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "send_"
  ): TypedContractMethod<
    [_from: AddressLike, _dstChain: BigNumberish, _payload: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setChainId"
  ): TypedContractMethod<
    [chain: BigNumberish, chainId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Received"
  ): TypedContractEvent<
    ReceivedEvent.InputTuple,
    ReceivedEvent.OutputTuple,
    ReceivedEvent.OutputObject
  >;
  getEvent(
    key: "Sent"
  ): TypedContractEvent<
    SentEvent.InputTuple,
    SentEvent.OutputTuple,
    SentEvent.OutputObject
  >;

  filters: {
    "Received(uint16,bytes,bytes)": TypedContractEvent<
      ReceivedEvent.InputTuple,
      ReceivedEvent.OutputTuple,
      ReceivedEvent.OutputObject
    >;
    Received: TypedContractEvent<
      ReceivedEvent.InputTuple,
      ReceivedEvent.OutputTuple,
      ReceivedEvent.OutputObject
    >;

    "Sent(address,uint16,bytes)": TypedContractEvent<
      SentEvent.InputTuple,
      SentEvent.OutputTuple,
      SentEvent.OutputObject
    >;
    Sent: TypedContractEvent<
      SentEvent.InputTuple,
      SentEvent.OutputTuple,
      SentEvent.OutputObject
    >;
  };
}
