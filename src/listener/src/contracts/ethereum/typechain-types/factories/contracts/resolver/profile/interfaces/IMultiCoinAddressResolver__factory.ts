/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IMultiCoinAddressResolver,
  IMultiCoinAddressResolverInterface,
} from "../../../../../contracts/resolver/profile/interfaces/IMultiCoinAddressResolver";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "host",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "name",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "tld",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "coin",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "address_",
        type: "bytes",
      },
    ],
    name: "SetMultiCoinAddress",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "host",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "name",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "tld",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "coin",
        type: "uint256",
      },
    ],
    name: "UnsetMultiCoinAddress",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "host",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "name",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "tld",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "coin",
        type: "uint256",
      },
    ],
    name: "getMultiCoinAddress",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "host",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "name",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "tld",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "coin",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "address_",
        type: "bytes",
      },
    ],
    name: "setMultiCoinAddress",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "host",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "name",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "tld",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "coin",
        type: "uint256",
      },
    ],
    name: "unsetMultiCoinAddress",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class IMultiCoinAddressResolver__factory {
  static readonly abi = _abi;
  static createInterface(): IMultiCoinAddressResolverInterface {
    return new Interface(_abi) as IMultiCoinAddressResolverInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IMultiCoinAddressResolver {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IMultiCoinAddressResolver;
  }
}
