/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IAffiliateProgramInterface extends ethers.utils.Interface {
  functions: {
    "available(string)": FunctionFragment;
    "batchPayout(bytes32[],bytes32[])": FunctionFragment;
    "earned(bytes32)": FunctionFragment;
    "enroll(string,address)": FunctionFragment;
    "issue(address,bytes32,uint256,bytes32)": FunctionFragment;
    "level(bytes32)": FunctionFragment;
    "payout(bytes32,bytes32)": FunctionFragment;
    "setPause(bool)": FunctionFragment;
    "valid(string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "available", values: [string]): string;
  encodeFunctionData(
    functionFragment: "batchPayout",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "earned", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "enroll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "level", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "payout",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setPause", values: [boolean]): string;
  encodeFunctionData(functionFragment: "valid", values: [string]): string;

  decodeFunctionResult(functionFragment: "available", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enroll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "level", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "valid", data: BytesLike): Result;

  events: {
    "EnrollmentRequest(address,bytes32)": EventFragment;
    "IssuedReward(address,bytes32,uint256,address,bytes32)": EventFragment;
    "Payout(bytes32,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EnrollmentRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuedReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Payout"): EventFragment;
}

export type EnrollmentRequestEvent = TypedEvent<
  [string, string] & { enroller: string; id: string }
>;

export type IssuedRewardEvent = TypedEvent<
  [string, string, BigNumber, string, string] & {
    buyer: string;
    fqdn: string;
    total: BigNumber;
    rewarder: string;
    id: string;
  }
>;

export type PayoutEvent = TypedEvent<
  [string, BigNumber, string] & { id: string; amount: BigNumber; ref: string }
>;

export class IAffiliateProgram extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAffiliateProgramInterface;

  functions: {
    available(id: string, overrides?: CallOverrides): Promise<[boolean]>;

    batchPayout(
      ids: BytesLike[],
      refs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    earned(id: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    enroll(
      id: string,
      registrant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    issue(
      buyer: string,
      fqdn: BytesLike,
      duration: BigNumberish,
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    level(id: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    payout(
      id: BytesLike,
      ref: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPause(
      allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    valid(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  available(id: string, overrides?: CallOverrides): Promise<boolean>;

  batchPayout(
    ids: BytesLike[],
    refs: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  earned(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  enroll(
    id: string,
    registrant: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  issue(
    buyer: string,
    fqdn: BytesLike,
    duration: BigNumberish,
    id: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  level(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  payout(
    id: BytesLike,
    ref: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPause(
    allow: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  valid(
    id: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    available(id: string, overrides?: CallOverrides): Promise<boolean>;

    batchPayout(
      ids: BytesLike[],
      refs: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    earned(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    enroll(
      id: string,
      registrant: string,
      overrides?: CallOverrides
    ): Promise<void>;

    issue(
      buyer: string,
      fqdn: BytesLike,
      duration: BigNumberish,
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    level(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    payout(
      id: BytesLike,
      ref: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setPause(allow: boolean, overrides?: CallOverrides): Promise<void>;

    valid(id: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "EnrollmentRequest(address,bytes32)"(
      enroller?: string | null,
      id?: BytesLike | null
    ): TypedEventFilter<[string, string], { enroller: string; id: string }>;

    EnrollmentRequest(
      enroller?: string | null,
      id?: BytesLike | null
    ): TypedEventFilter<[string, string], { enroller: string; id: string }>;

    "IssuedReward(address,bytes32,uint256,address,bytes32)"(
      buyer?: string | null,
      fqdn?: null,
      total?: null,
      rewarder?: string | null,
      id?: BytesLike | null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string],
      {
        buyer: string;
        fqdn: string;
        total: BigNumber;
        rewarder: string;
        id: string;
      }
    >;

    IssuedReward(
      buyer?: string | null,
      fqdn?: null,
      total?: null,
      rewarder?: string | null,
      id?: BytesLike | null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string],
      {
        buyer: string;
        fqdn: string;
        total: BigNumber;
        rewarder: string;
        id: string;
      }
    >;

    "Payout(bytes32,uint256,bytes32)"(
      id?: null,
      amount?: null,
      ref?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { id: string; amount: BigNumber; ref: string }
    >;

    Payout(
      id?: null,
      amount?: null,
      ref?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { id: string; amount: BigNumber; ref: string }
    >;
  };

  estimateGas: {
    available(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchPayout(
      ids: BytesLike[],
      refs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    earned(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    enroll(
      id: string,
      registrant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    issue(
      buyer: string,
      fqdn: BytesLike,
      duration: BigNumberish,
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    level(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    payout(
      id: BytesLike,
      ref: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPause(
      allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    valid(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    available(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchPayout(
      ids: BytesLike[],
      refs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    earned(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enroll(
      id: string,
      registrant: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    issue(
      buyer: string,
      fqdn: BytesLike,
      duration: BigNumberish,
      id: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    level(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payout(
      id: BytesLike,
      ref: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPause(
      allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    valid(
      id: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
