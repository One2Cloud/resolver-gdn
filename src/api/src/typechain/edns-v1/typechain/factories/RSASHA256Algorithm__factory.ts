/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RSASHA256Algorithm,
  RSASHA256AlgorithmInterface,
} from "../RSASHA256Algorithm";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "key",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610ac8806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063de8f50a114610030575b600080fd5b61004a60048036038101906100459190610692565b610060565b6040516100579190610761565b60405180910390f35b600060608060006100bf60048b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506103ea90919063ffffffff16565b60ff16905060008161ffff16146101be5761012e60058261ffff168c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506104159092919063ffffffff16565b92506101b760058261014091906107b9565b61ffff1660058361ffff168d8d905061015991906107fb565b61016391906107fb565b8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506104159092919063ffffffff16565b9150610302565b61021660058b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506104aa90919063ffffffff16565b905061027660078261ffff168c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506104159092919063ffffffff16565b92506102ff60078261028891906107b9565b61ffff1660078361ffff168d8d90506102a191906107fb565b6102ab91906107fb565b8c8c8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506104159092919063ffffffff16565b91505b6000606061035584868a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506104d9565b80925081935050508180156103d957506103856020825161037691906107fb565b826104f490919063ffffffff16565b60028b8b60405161039792919061086e565b602060405180830381855afa1580156103b4573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906103d791906108bd565b145b955050505050509695505050505050565b60008282815181106103ff576103fe6108ea565b5b602001015160f81c60f81b60f81c905092915050565b6060835182846104259190610919565b111561043057600080fd5b60008267ffffffffffffffff81111561044c5761044b61096f565b5b6040519080825280601f01601f19166020018201604052801561047e5781602001600182028036833780820191505090505b509050600080602083019150856020880101905061049d82828761051f565b8293505050509392505050565b600082516002836104bb9190610919565b11156104c657600080fd5b61ffff8260028501015116905092915050565b600060606104e8838587610583565b91509150935093915050565b600082516020836105059190610919565b111561051057600080fd5b81602084010151905092915050565b5b6020811061055e57815183526020836105399190610919565b92506020826105489190610919565b915060208161055791906107fb565b9050610520565b60006001826020036101000a0390508019835116818551168181178652505050505050565b6000606060008551855185518888886040516020016105a796959493929190610a2e565b6040516020818303038152906040529050835167ffffffffffffffff8111156105d3576105d261096f565b5b6040519080825280601f01601f1916602001820160405280156106055781602001600182028036833780820191505090505b50915083516020830182516020840160055afa925050935093915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126106525761065161062d565b5b8235905067ffffffffffffffff81111561066f5761066e610632565b5b60208301915083600182028301111561068b5761068a610637565b5b9250929050565b600080600080600080606087890312156106af576106ae610623565b5b600087013567ffffffffffffffff8111156106cd576106cc610628565b5b6106d989828a0161063c565b9650965050602087013567ffffffffffffffff8111156106fc576106fb610628565b5b61070889828a0161063c565b9450945050604087013567ffffffffffffffff81111561072b5761072a610628565b5b61073789828a0161063c565b92509250509295509295509295565b60008115159050919050565b61075b81610746565b82525050565b60006020820190506107766000830184610752565b92915050565b600061ffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006107c48261077c565b91506107cf8361077c565b92508261ffff038211156107e6576107e561078a565b5b828201905092915050565b6000819050919050565b6000610806826107f1565b9150610811836107f1565b9250828210156108245761082361078a565b5b828203905092915050565b600081905092915050565b82818337600083830152505050565b6000610855838561082f565b935061086283858461083a565b82840190509392505050565b600061087b828486610849565b91508190509392505050565b6000819050919050565b61089a81610887565b81146108a557600080fd5b50565b6000815190506108b781610891565b92915050565b6000602082840312156108d3576108d2610623565b5b60006108e1848285016108a8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610924826107f1565b915061092f836107f1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156109645761096361078a565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000819050919050565b6109b96109b4826107f1565b61099e565b82525050565b600081519050919050565b60005b838110156109e85780820151818401526020810190506109cd565b838111156109f7576000848401525b50505050565b6000610a08826109bf565b610a12818561082f565b9350610a228185602086016109ca565b80840191505092915050565b6000610a3a82896109a8565b602082019150610a4a82886109a8565b602082019150610a5a82876109a8565b602082019150610a6a82866109fd565b9150610a7682856109fd565b9150610a8282846109fd565b915081905097965050505050505056fea2646970667358221220b0ba578fe2c3d247abfa9f500ceae7ee038139a705e66108a9f2716cab7f59f264736f6c634300080a0033";

export class RSASHA256Algorithm__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RSASHA256Algorithm> {
    return super.deploy(overrides || {}) as Promise<RSASHA256Algorithm>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RSASHA256Algorithm {
    return super.attach(address) as RSASHA256Algorithm;
  }
  connect(signer: Signer): RSASHA256Algorithm__factory {
    return super.connect(signer) as RSASHA256Algorithm__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RSASHA256AlgorithmInterface {
    return new utils.Interface(_abi) as RSASHA256AlgorithmInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RSASHA256Algorithm {
    return new Contract(address, _abi, signerOrProvider) as RSASHA256Algorithm;
  }
}
